---
import type {Input} from '../utils/form';
import PageTitle from './PageTitle.astro';
interface Props {
	fields: Record<string, Input>;
	submitLabel: string;
	route: string;
	title: string;
}

const {fields: fieldObject, submitLabel = "Submit", route, title = undefined} = Astro.props;
const fields = Object.entries(fieldObject);
const path = route.startsWith('/') ? `${import.meta.env.API_URL}${route}` : route;

function calculateAutocomplete(name: string, field: Input) {
	if (field.autocomplete) {
		if (typeof field.autocomplete === 'string') return field.autocomplete;

		return field.autocomplete ? name : 'off';
	}

	return 'off';
}
---
<form action={path} method="post">
	{title &&
		<PageTitle title={title}/>}
	{fields.map(([name, field]) =>
		<div class="input">
			<label for={name} hidden={field.label ? '' : 'hidden'}>{field.label}</label>
			<input autocomplete={calculateAutocomplete(name, field)} id={name} name={name} placeholder={field.placeholder} type={field.type}/>
		</div>)}

	<p class="error"></p>
	<button type="submit">{submitLabel}</button>

	<slot/>
</form>

<style>
	form {
		display: flex;
		flex-direction: column;
		align-items: center;
		border: 3px solid #FFF;
		border-radius: 12px;
		gap: 1rem;
		padding-top: 1rem;
		height: 100%;
		position: relative;
		width: 100%;
		min-width: 20rem;
	}

	.input:nth-of-type(2) {
		margin-top: 1rem;
	}

	input::placeholder {
		color: white;
		opacity: 0.5;
	}

	input, select, button {
		border-radius: 4px;
		border: 3px solid #FFF;
		background: transparent;
		color: white;
		font-size: 1rem;
		font-family: inherit;
		font-weight: 500;
		padding: 0.4rem 0.8rem;
		width: 12rem;
		box-sizing: content-box;
	}

	input:focus {
		outline: none;
	}

	button {
		padding: 0.5rem;
		margin-top: 2.5rem;
		cursor: pointer;
		position: relative;
		overflow: hidden;
		background-image: linear-gradient(to right, #FFF, #FFF);
		background-position: 0 100%;
		background-repeat: no-repeat;
		background-size: 100% 0;
		transition: background-size 0.1s ease-in-out, color 0.1s ease-in-out;
		background-color: transparent;
	}

	button:hover {
		color: #000;
		background-size: 100% 100%;
		font-weight: 500;
	}

	.input {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 0.5rem;
	}

	.error {
		color: #ff4c4c;
		margin: 0;
		height: 0;
		transition: opacity 0.2s ease-in-out;
	}

	.error:empty {
		opacity: 0;
	}

	.error:not(:empty) {
		opacity: 1;
	}
</style>

<style is:global>
	.title {
		margin: 2rem 0 1rem;
	}
</style>

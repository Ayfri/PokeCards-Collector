---
interface Pokemon {
	id: string;
	route: string
	title: string;
	inputs: string[];
	selects: string[{ name: string, options: string[], multiple: boolean }];
}

const {id, route, title, inputs, selects} = Astro.props;
const path = route.startsWith("/") ? `${import.meta.env.API_URL}${route}` : route;
---

<div class="panel">
	<h1>{title}</h1>
	<form method="post" id={id}>
		<div class="fields">
			{inputs.map((input) => <input name={input} placeholder={input[0].toUpperCase() + input.slice(1)}/>)}
			{selects.filter(a => a.name != "").map((select) => <select
				name={select.name} multiple={select.multiple}>{select.options.map((option) =>
				<option>{option}</option>)}</select>)}
		</div>
		<div class="buttons">
			<div class="buttons-top">
				<button style="background-color: #5ca854" name="add" formmethod="post"
				        formaction=`${path}?button=add`>
					Add
				</button>
				<button style="background-color: #c44949" name="remove" formmethod="post"
				        formaction=`${path}?button=remove`>
					Remove
				</button>
			</div>
			<div class="buttons-bottom">
				<button style="background-color: #d16d55" name="edit" formmethod="post"
				        formaction=`${path}?button=edit`>
					Edit
				</button>
			</div>
		</div>
	</form>
</div>
<script>
	import {displayError, handleForm} from '../utils/form';
	handleForm<Pokemon>(async (user, response, form) => {
		if (response.status === 200) {
			window.location.href = '/admin';
			return;
		}
		displayError(user, form);
	}, false, document.querySelector(`#${id}`));
</script>
<style>
	h1 {
		text-shadow: 0 0 .3em #000;
		padding: 0;
		margin: 0;
	}

	.panel {
		background-color: #2C2829;
		width: 22rem;
		height: 36rem;
		border-radius: 2em;
		display: flex;
		justify-content: center;
		flex-flow: column;
		align-items: center;
		gap: 2rem;
		padding: 2rem;
	}

	form {
		flex: 1;
		display: flex;
		flex-flow: column;
		align-items: center;
	}

	.fields {
		display: flex;
		flex-flow: column;
		gap: 1rem;
		width: 100%;
		align-items: center;
		flex: 1;
	}

	.buttons {
		display: flex;
		flex-flow: column;
		align-items: center;
		gap: 1rem;
	}

	.buttons-top, .buttons-bottom {
		width: 100%;
	}

	.buttons-top button {
		width: 50%;
	}

	.buttons-bottom button {
		width: 100%;
	}

	.buttons-top {
		width: 100%;
		gap: 1rem;
		display: flex;
	}

	button {
		border: none;
		font-family: "Clash Display", serif;
		font-weight: 600;
		color: white;
		height: 2rem;
		border-radius: .6rem;
		font-size: 17px;
		padding: 1.5rem;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: all 0.6s cubic-bezier(0.22, 1, 0.36, 1);
	}

	button:hover {
		transform: scale(1.05);
	}

	select[multiple] {
		height: 5rem;
	}

	select:hover, button:hover {
		cursor: pointer;
	}

	input::placeholder {
		color: white;
		opacity: 1;
	}

	input, select {
		border-radius: 4px;
		border: 3px solid #FFF;
		background: transparent;
		color: white;
		font-family: "Clash Display", serif;
		font-weight: 500;
		padding: 0.2rem;
		width: 12rem;
		box-sizing: content-box;
		height: 1.5rem;
		font-size: 17px;
	}


	input:focus {
		outline: none;
	}
</style>
---
import "../../styles/colors.css";

import type {GetStaticPaths} from 'astro';
import {getCards, getPokemons} from '../../helpers/data';
import {pascalCase} from '../../helpers/strings';
import Layout from '../../layouts/Layout.astro';
import PageTitle from "../../components/PageTitle.astro";
import {Image} from "astro:assets";
import type {Card} from "../../types";


export const getStaticPaths = (async () => {
	const pokemons = await getPokemons();
	let allCards = await getCards();
	allCards = allCards.sort((a, b) => a.pokemon.id - b.pokemon.id || b.price - a.price);

	return pokemons.map(pokemon => {
		const pokemonCards = allCards.filter(c => parseInt(c.numero) === pokemon.id && c.set);
		if (!pokemonCards.length) return undefined;

		const card = pokemonCards[0];

		return {
			params: {
				numero: pokemon.id,
			},
			props: {
				card,
				cards: pokemonCards,
			},
		};
	}).filter(x => !!x);
}) satisfies GetStaticPaths;

interface Props {
	card: Card;
	cards: Card[];
}

const {
	card,
	cards,
} = Astro.props;

const setLogoFirstHalf = cards.slice(0, 5).map(card => card.set);
const setLogoSecondHalf = cards.slice(5, 10).map(card => card.set);
const pokemonName = card.pokemon.name;
const index = 0;
const capitalizedPokemonName = pokemonName.charAt(0).toUpperCase() + pokemonName.slice(1);

const pokemons = await getPokemons();

const evolvesTo = card.pokemon.evolves_to?.map(evolution => {
	const pokemon = pokemons.find(pokemon => pokemon.id === evolution)!;
	return {
		id: evolution,
		name: pokemon.name,
	};
})?.sort((a, b) => a.name.localeCompare(b.name)) ?? [];

const evolvesFrom = card.pokemon.evolves_from ? pokemons.find(pokemon => pokemon.id === card.pokemon.evolves_from)! : undefined;
---

<Layout
	title={`${capitalizedPokemonName} - Cards`}
	description={`${capitalizedPokemonName}: ${card.pokemon.description}`}
	image={{
		url: card.image,
		alt: card.pokemon.description,
	}}
>
	<main class="max-w-[100vw] m-auto p-2 text-lg text-white">
		<div class={`filter ${card.types.toLowerCase().split(',')[0]}`} id="filter"></div>
		<div class="mt-20 mx-auto flex flex-col gap-8 w-[90%] -z-10 max-lg:mt-8">
			<div class="h-[33rem] max-lg:h-[inherit] max-lg:flex max-lg:flex-col max-lg:gap-8 max-lg:flex-wrap max-lg:content-center">
				<div class="card-container h-full w-fit m-auto flex gap-12 max-lg:gap-3 max-lg:grid max-lg:place-items-center">
					<div class="left-sets">
						{setLogoFirstHalf.map((set, index) =>
							<Image
								alt={set.name}
								class={`set ${index}`}
								draggable="false"
								height="105"
								title={`Click to see card in ${set.name} set`}
								src={set.logo}
								width="75"
							/>)}
					</div>
					<div
						class={`center-card ${card.types.toLowerCase().split(',')[0]} ${card.rarity.toLowerCase()}`}
						data-values={cards.map(card => card.rarity.toLowerCase())}
						id="center-card"
					>
						<div
							class={`card-aura ${card.types.toLowerCase().split(',')[0]}`}
							id="card-aura"
						>
						</div>
						<div class="relative h-[34rem] w-[24rem] -z-10 max-lg:w-[75vw] max-lg:h-[112.5vw]">
							{cards.map((card, cardIndex) => <img
								alt={card.pokemon.name}
								class:list={{
									image: true,
									hidden: cardIndex !== index,
								}}
								decoding="async"
								hidden={cardIndex !== index}
								draggable="false"
								loading={cardIndex === index ? 'eager' : 'lazy'}
								height="420"
								src={card.image}
								width="300"
							/>)}
						</div>
					</div>
					<div class={`right-sets ${setLogoSecondHalf.length ? '' : 'empty'}`}>
						{setLogoSecondHalf.map((set, index) =>
							<Image
								alt={set.name}
								class={`set ${index + 5}`}
								draggable="false"
								height="105"
								title={`Click to see card in ${set.name} set`}
								src={set.logo}
								width="75"
							/>)}
					</div>
				</div>
			</div>
			<div class="mb-8 flex flex-col items-center gap-4 max-lg:gap-0">
				<p
					class="m-0 px-5 py-2 bg-gray-800 border-[3px] border-gold-400 rounded-[1rem] text-2xl"
					data-values={cards.map(card => card.price)}
					id="card-price"
					title="Average current price"
				>
					{card.price ? `${card.price} $` : 'Priceless'}
				</p>

				<PageTitle title={capitalizedPokemonName}/>

				<div class="flex flex-col items-center gap-4 max-lg:flex-col max-lg:items-center">
					<div
						class="flex gap-4"
						data-values={cards.map(card => card.types.toLowerCase().replace(',', ' ').split(','))}
						id="card-types"
					>
						{card.types.toLowerCase()
						     .split(',')
						     .map(type =>
							     <p class={`card-type ${type}`}>
								     {type}
							     </p>,
						     )
						}
					</div>
					<p class="text-center">{card.pokemon.description}</p>
					{evolvesFrom &&
						<p class="text-gold-400">
							Evolves from:
							<a
								class="text-blue-300 underline"
								href={`/card/${evolvesFrom.id}/`}
								title={`${pascalCase(card.pokemon.name)} is the evolution of ${pascalCase(evolvesFrom.name)}`}
							>
								{pascalCase(evolvesFrom.name)}
							</a>
						</p>
					}

					{card.pokemon.evolves_to &&
						<p class="text-gold-400">
							Evolves to: {
							evolvesTo.map((evolution, i, evolves_to) =>
								<>
								<a
									class="text-blue-300 underline"
									href={`/card/${evolution.id}/`}
									title={`${pascalCase(card.pokemon.name)} can evolve to ${pascalCase(evolution.name)}`}
								>
									{pascalCase(evolution.name)}
								</a>
								{
									i === evolves_to.length - 1 ? '' : ', '
								}
								</>,
							)
						}
						</p>
					}
				</div>
			</div>
		</div>
	</main>
</Layout>
<script>
	const sets = document.querySelectorAll('.set') as NodeListOf<HTMLImageElement>;
	const mainImages = document.querySelectorAll('.image') as NodeListOf<HTMLImageElement>;
	const cardAura = document.querySelector('#card-aura') as HTMLDivElement;

	const cardPrice = document.querySelector('#card-price') as HTMLParagraphElement;
	const cardTypes = document.querySelector('#card-types') as HTMLDivElement;
	const centerCard = document.querySelector('#center-card') as HTMLDivElement;
	const filter = document.querySelector('#filter') as HTMLDivElement;

	let currentIndex = 0;

	function handleDynamicValue<T extends HTMLElement>(element: T, callback: (element: T, value: string) => void) {
		const values = element.dataset.values!.split(',');
		const value = values[currentIndex];
		callback(element, value);
	}

	sets.forEach(set => {
		if (currentIndex.toString() === set.classList[1] || set.classList[1] === '0') {
			set.classList.add('shadow');
		}

		set.addEventListener('click', () => {
			const index = parseInt(set.classList[1]);
			currentIndex = index;

			mainImages.forEach(image => image.classList.add('hidden'));
			mainImages[index].classList.remove('hidden');
			mainImages[index].hidden = false;

			sets.forEach(set => set.classList.remove('shadow'));
			sets[index].classList.add('shadow');

			handleDynamicValue(cardTypes, (element, value) => {
				const types = value.split(' ');
				const firstType = types[0].toLowerCase();
				element.innerHTML = types.map(type => `<p class="card-type ${type.toLowerCase()}">${type}</p>`).join('');

				filter.classList.remove(...filter.classList);
				filter.classList.add('filter', firstType);

				cardAura.classList.remove(...cardAura.classList);
				cardAura.classList.add('card-aura', firstType);

				const rarity = centerCard.dataset.values?.split(',')[index] ?? 'unknown';
				centerCard.classList.remove(...centerCard.classList);
				centerCard.classList.add('center-card', firstType, ...rarity.split(' '), 'inactive');
			});

			handleDynamicValue(cardPrice, (element, price) => {
				element.textContent = price ? `${price} $` : 'Priceless';
			});
		});
	});

	/*CARD EFFECT*/
	const card = document.querySelector('.center-card') as HTMLDivElement;
	const style = document.querySelector('#card') as HTMLStyleElement;

	card.addEventListener('mousemove', e => {
		card.classList.remove('inactive');
		const pos = [
			e.offsetX,
			e.offsetY,
		];
		e.preventDefault();
		const l = pos[0];
		const t = pos[1];
		const h = card.getBoundingClientRect().height;
		const w = card.getBoundingClientRect().width;
		const px = Math.abs(Math.floor(100 / w * l) - 100);
		const py = Math.abs(Math.floor(100 / h * t) - 100);
		const pa = (50 - px) + (50 - py);
		// math for gradient / background positions
		const lp = 50 + (px - 50) / 1.5;
		const tp = 50 + (py - 50) / 1.5;
		const pxSpark = 50 + (px - 50) / 7;
		const pySpark = 50 + (py - 50) / 7;
		const pOpc = 20 + Math.abs(pa) * 1.5;
		const ty = ((tp - 50) / 2) * -1;
		const tx = ((lp - 50) / 1.5) * 0.5;

		const gradPos = `background-position: ${lp}% ${tp}%;`;
		const sparkPos = `background-position: ${pxSpark}% ${pySpark}%;`;
		const opc = `opacity ${pOpc / 100};`;
		const tf = `transform: rotateX(${ty}deg) rotateY(${tx}deg);`;
		const style2 = `.holo:hover::before {${gradPos}} !important`;
		const style3 = `.holo:hover::after {${sparkPos} ${opc}} !important`;
		card.setAttribute('style', tf);
		style.innerHTML = `${style2} \n${style3}}`;
	});

	card.addEventListener('mouseleave', () => {
		card.classList.add('inactive');
		card.removeAttribute('style');
		card.style.transform = `rotateY(0deg) rotateX(0deg)`;
		style.innerHTML = '';
	});
</script>

<style is:inline id="card"></style>
<style>
	img {
		user-select: none;
	}

	.inactive {
		transition: all 3s cubic-bezier(0.22, 1, 0.36, 1) !important;
	}

	.filter::before {
		background-image: url("/particles.png");
		background-size: cover;
		content: "";
		filter: var(--filter);
		height: 100%;
		inset: 0 0 0 0;
		position: fixed;
		width: 100%;
		z-index: -2;
	}

	.shadow {
		transition: all 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		filter: drop-shadow(0px 0px 8px rgb(243, 208, 44)) drop-shadow(3px 3px 4px #000);
	}

	.set {
		transition: all .5s cubic-bezier(0.22, 1, 0.36, 1);
	}

	.set:hover {
		cursor: pointer;
		transform: scale(1.05);
	}

	.left-sets, .right-sets {
		align-items: center;
		background-color: rgba(35, 35, 35, 0.75);
		border-radius: 1rem;
		border-color: theme(borderColor.gold.400);
		border-style: solid;
		border-width: 6px;
		box-sizing: border-box;
		display: flex;
		flex-direction: column;
		height: 34rem;
		justify-content: space-evenly;
		padding: 1rem;
		width: 11rem;
		z-index: 1;
	}

	.left-sets > img, .right-sets > img {
		height: 5.5rem;
		object-fit: contain;
		width: 8.5rem;
	}

	.center-card {
		position: relative;
		transform-style: preserve-3d;
	}

	.center-card:hover {
		border-radius: 0.5rem !important;
		box-shadow: 0 0 30px -5px #ffffff70, 0 0 10px -2px #ffffff9e, 0 50px 20px 10px rgb(0, 0, 0);
	}

	#card-aura {
		background-color: var(--type-color);
		border-radius: 50%;
		filter: blur(5rem) opacity(0.5);
		height: 43rem;
		left: 50%;
		pointer-events: none;
		position: absolute;
		top: 50%;
		transform: translateX(-50%) translateY(-50%);
		transition: all 0.3s ease-in-out;
		width: 43rem;
		z-index: -20;
	}

	@keyframes image-fade-in {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}

	@keyframes image-fade-out {
		0% {
			opacity: 1;
		}
		100% {
			opacity: 0;
		}
	}

	.image {
		border-radius: 0.5rem;
		height: 34rem;
		position: absolute;
		animation: image-fade-in 0.4s ease-in-out;
		width: 24rem;
	}

	.image.hidden {
		animation: image-fade-out 0.4s ease-in-out;
		display: block;
		opacity: 0;
	}

	.image:not(.hidden) {
		z-index: 10;
	}

	:global(.card-type) {
		margin: 0;
		background-color: color-mix(in oklab, var(--type-color), white 50%);
		border: 1px solid var(--type-color);
		border-radius: 1rem;
		color: color-mix(in oklab, var(--type-color), black 25%);
		padding: 0.15rem 0.8rem;
	}

	.pokemon-info > p {
		margin: 0;
		text-align: center;
	}

	:global(.holo::after) {
		background-image: url("https://assets.codepen.io/13471/sparkles.gif"), url(https://assets.codepen.io/13471/holo.png), linear-gradient(125deg, #ff008450 15%, #fca40040 30%, #ffff0030 40%, #00ff8a20 60%, #00cfff40 70%, #cc4cfa50 85%);
		background-position: 50% 50%;
		background-size: 160%;
		border-radius: 2.5rem !important;
		filter: brightness(1) contrast(1);
		mix-blend-mode: color-dodge;
		opacity: 70%;
		transition: all 0.33s ease;
		z-index: 2;
	}

	.holo::before,
	.holo::after {
		background-repeat: no-repeat;
		border-radius: 0.5rem !important;
		content: "";
		height: 34rem;
		left: 50%;
		mix-blend-mode: color-dodge;
		position: absolute;
		top: 52%;
		transform: translate(-50%, -50%);
		transition: all 0.33s ease;
		width: 24rem;
	}

	.holo.active:after,
	.holo:hover:after {
		border-radius: 0.5rem !important;
		filter: brightness(1) contrast(1);
		opacity: 1;
	}

	.holo.active,
	.holo:hover {
		animation: none;
		transition: box-shadow 0.1s ease-out;
		border-radius: 0.5rem !important;
	}

	:global(.holo:hover::before) {
		animation: none;
		background-image: linear-gradient(110deg, transparent 25%, var(--type-color) 48%, var(--type-color2) 52%, transparent 75%);
		background-position: 50% 50%;
		background-size: 250% 250%;
		border-radius: 0.5rem !important;
		filter: brightness(0.66) contrast(1.33);
		opacity: 0.88;
		transition: none;
	}

	@keyframes placeHolderShimmer {
		0% {
			background-position: -468px 0;
		}
		100% {
			background-position: 468px 0;
		}
	}

	.loader {
		animation-duration: 4s;
		animation-fill-mode: forwards;
		animation-iteration-count: infinite;
		animation-name: placeHolderShimmer;
		animation-timing-function: linear;
		background-size: auto;
		background: #f6f7f8;
		background: linear-gradient(to right, #afafaf 8%, #9a9999 38%, #afafaf 54%);
		border-radius: 0.5rem;
		height: 420px;
		position: absolute;
		width: 300px;
		z-index: -1;
	}

	@media (max-width: 768px) {
		.card-container {
			grid-template-areas:
					'center'
					'left'
					'right';
		}

		#center-card {
			grid-area: center;
			margin-bottom: 0.75rem;
		}

		#card-aura {
			height: 50vh;
			width: 80vw;
			top: 35%;
		}

		.images, .image {
			height: 112.5vw;
			width: 75vw;
		}

		.left-sets, .right-sets {
			width: 90vw;
			height: 5rem;
			flex-direction: row;
			padding: 0.33rem;
		}

		.left-sets {
			grid-area: left;
		}

		.right-sets {
			grid-area: right;
		}

		.right-sets.empty {
			display: none;
		}

		.left-sets > img, .right-sets > img {
			max-height: 4rem;
			aspect-ratio: 1;
			width: unset;
		}
	}
</style>

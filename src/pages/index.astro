---
import {getCards, getRarities, getSets, getTypes} from '../helpers/data';
import Layout from '../layouts/Layout.astro';
import Card from "../components/Card.astro";
import PageTitle from "../components/PageTitle.astro";


const types = await getTypes();
const rarity = await getRarities();
const sets = await getSets();

let cards = await getCards();
cards = cards.filter((card, index, self) => card.pokemon && self.findIndex(c => c.pokemon.id === card.pokemon.id) === index);
cards = cards.sort((a, b) => a.pokemon.id - b.pokemon.id || b.price - a.price);
cards = cards.map(card => {
	card.price ||= 100_000;
	return card;
});

---

<Layout title="Card List">
	<main>
		<button id="scroll-btn" class="scroll-btn">
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
				<path
					d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"
				/>
			</svg>
		</button>
		<div class="fixed-container">
			<div class="top-container">
				<PageTitle title="Card List"/>
				<div class="filters-container">
					<div class="filters-top">
						<button class="sort-order-btn filter" data-sort="asc">
							<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512">
								<path d="M151.6 42.4C145.5 35.8 137 32 128 32s-17.5 3.8-23.6 10.4l-88 96c-11.9 13-11.1 33.3 2 45.2s33.3 11.1 45.2-2L96 146.3V448c0 17.7 14.3 32 32 32s32-14.3 32-32V146.3l32.4 35.4c11.9 13 32.2 13.9 45.2 2s13.9-32.2 2-45.2l-88-96zM320 480h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32z"/>
							</svg>
						</button>
						<button class="reset-btn filter">Reset filters</button>
						<input type="text" placeholder="ID" name="numero" class="filter" id="numero">
						<input type="text" placeholder="Name" name="name" class="filter" id="name">
					</div>
					<div class="filters-bottom">
						<output class="filters-result">Cards : {cards.length}</output>
						<select name="sort" id="sort" class="filter">
							<option value="sort-numero" selected>Sort by pok√©dex</option>
							<option value="sort-price">Sort by price</option>
							<option value="sort-name">Sort by name</option>
						</select>
						<select name="set" id="set" class="filter">
							<option value="all" selected>All sets</option>
							{sets.sort((a, b) => a.name.localeCompare(b.name))
							     .map(set =>
								     <option value={set.name.toLowerCase()}>{set.name}</option>)}
						</select>
						<select name="type" id="type" class="filter">
							<option value="all" selected>All types</option>
							{types.sort((a, b) => a.localeCompare(b))
							      .map(type =>
								      <option value={type.toLowerCase()}>{type}</option>)}
						</select>
						<select name="rarity" id="rarity" class="filter">
							<option value="all" selected>All rarities</option>
							{rarity.sort((a, b) => a.localeCompare(b))
							       .map(rarity =>
								       <option value={rarity.toLowerCase()}>{rarity}</option>)}
						</select>
					</div>
				</div>
			</div>
		</div>

		<div class="cards-grid">
			{cards.map(card =>
				<Card card={card}/>
			)}
		</div>
	</main>
</Layout>

<script>
	/*SCROLL BUTTON*/
	const scrollBtn = document.querySelector<HTMLButtonElement>('#scroll-btn');
	scrollBtn!.addEventListener('click', () => {
		const cardsGrid = document.querySelector<HTMLDivElement>('.cards-grid');
		cardsGrid!.scrollTo({
			top: cardsGrid!.scrollHeight,
			behavior: 'smooth',
		});
	});

	const filters = {
		numero: document.querySelector<HTMLInputElement>('#numero')!,
		name: document.querySelector<HTMLInputElement>('#name')!,
		type: document.querySelector<HTMLSelectElement>('#type')!,
		rarity: document.querySelector<HTMLSelectElement>('#rarity')!,
		set: document.querySelector<HTMLSelectElement>('#set')!,
		sort: document.querySelector<HTMLSelectElement>('#sort')!,
	};

	const cards = Array.from(document.querySelectorAll<HTMLDivElement>('.card-link'));

	function applyFilters() {
		const numeroFilter = filters.numero.value.trim();
		const nameFilter = filters.name.value.trim().toLowerCase();
		const typeFilter = filters.type.value.toLowerCase();
		const rarityFilter = filters.rarity.value;
		const setFilter = filters.set.value;

		cards.forEach(card => {
			const matchesNumero = !numeroFilter || card.dataset.numero === numeroFilter;
			const matchesName = !nameFilter || card.dataset.name!.includes(nameFilter);
			const types = card.dataset.types!.split(',');
			const matchesType = typeFilter === 'all' || types.includes(typeFilter);
			const matchesRarity = rarityFilter === 'all' || card.dataset.rarity === rarityFilter;
			const matchesSet = setFilter === 'all' || card.dataset.set === setFilter;

			if (matchesNumero && matchesName && matchesType && matchesRarity && matchesSet) {
				card.classList.remove('hidden');
			} else {
				card.classList.add('hidden');
			}
		});

		sortCards();
	}

	function sortCards() {
		const sortValue = filters.sort.value;
		console.log(`Sorting by ${sortValue}`);
		const cardsContainer = document.querySelector<HTMLDivElement>('.cards-grid')!;
		const sortedCards = Array.from(cards).filter(card => !card.classList.contains('hidden'));
		const reversed = document.querySelector<HTMLButtonElement>('.sort-order-btn')!.dataset.sort === 'desc';

		sortedCards.sort((a, b) => {
			if (reversed) {
				[
					a,
					b,
				] =
					[
						b,
						a,
					];
			}
			switch (sortValue) {
				case 'sort-numero':
					return parseInt(a.dataset.numero!) - parseInt(b.dataset.numero!);
				case 'sort-price':
					return parseInt(a.dataset.price!) - parseInt(b.dataset.price!);
				case 'sort-name':
					return a.dataset.name!.localeCompare(b.dataset.name!);
				default:
					return 0;
			}
		});

		cardsContainer.innerHTML = '';
		sortedCards.forEach(card => cardsContainer.appendChild(card));
	}

	Object.values(filters).forEach(filter => filter.addEventListener('change', applyFilters));

	document.querySelector<HTMLButtonElement>('.reset-btn')!.addEventListener('click', () => {
		Object.values(filters).forEach(filter => {
			if (filter.tagName === 'SELECT') {
				filter.value = 'all';
			} else {
				filter.value = '';
			}
		});
		applyFilters();
	});

	const sortOrderButton = document.querySelector<HTMLButtonElement>('.sort-order-btn');
	sortOrderButton!.addEventListener('click', () => {
		const sortOrder = sortOrderButton!.dataset.sort === 'asc' ? 'desc' : 'asc';
		sortOrderButton!.dataset.sort = sortOrder;

		if (sortOrder === 'asc') {
			sortOrderButton!.innerHTML =
				`<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512"><path d="M151.6 42.4C145.5 35.8 137 32 128 32s-17.5 3.8-23.6 10.4l-88 96c-11.9 13-11.1 33.3 2 45.2s33.3 11.1 45.2-2L96 146.3V448c0 17.7 14.3 32 32 32s32-14.3 32-32V146.3l32.4 35.4c11.9 13 32.2 13.9 45.2 2s13.9-32.2 2-45.2l-88-96zM320 480h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32z"/></svg>`;
		} else {
			sortOrderButton!.innerHTML =
				`<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512"><path d="M151.6 469.6C145.5 476.2 137 480 128 480s-17.5-3.8-23.6-10.4l-88-96c-11.9-13-11.1-33.3 2-45.2s33.3-11.1 45.2 2L96 365.7V64c0-17.7 14.3-32 32-32s32 14.3 32 32V365.7l32.4-35.4c11.9-13 32.2-13.9 45.2-2s13.9 32.2 2 45.2l-88 96zM320 480c-17.7 0-32-14.3-32-32s14.3-32 32-32h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H320z"/></svg>`;
		}
		applyFilters();
	});

	applyFilters();
</script>

<style>
	:root {
		--card-margin: 1rem;
		--header-padding: 0.6rem;
	}

	body {
		overflow: hidden;
	}

	main {
		padding: var(--header-padding);
		color: white;
		font-size: 20px;
		line-height: 1.6;
		display: flex;
		flex-direction: column;
		height: calc(100vh - 5rem);
		gap: 1rem;
		margin-bottom: 10rem;
	}

	.fixed-container {
		width: calc(100% - var(--header-padding) * 2);
	}

	@media (max-width: 768px) {
		.fixed-container {
			width: 100%;
		}
	}

	.cards-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(30rem, 1fr));
		justify-content: center;
		overflow-y: scroll;
		place-items: center;
		scroll-behavior: smooth;
	}

	.cards-grid::-webkit-scrollbar, html::-webkit-scrollbar, body::-webkit-scrollbar {
		display: none;
	}

	.cards-grid, html, body {
		scrollbar-width: none;
	}

	.top-container {
		display: flex;
		justify-content: space-between;
		margin-left: 7rem;
		margin-right: 7rem;
		align-items: center;
		border-bottom: white solid 6px;
	}

	.filters-container {
		display: flex;
		flex-flow: column;
		align-items: flex-end;
		gap: 1rem;
	}

	@media (max-width: 768px) {
		.top-container {
			flex-direction: column;
			margin-left: 0;
			margin-right: 0;
			padding-bottom: 1rem;
			border-bottom-width: 4px;
		}

		.filters-container {
			flex-flow: row;
		}
	}

	.filters-result {
		color: #fbc54a;
		font-weight: 600;
		font-size: 1rem;
	}

	select:hover {
		cursor: pointer;
	}

	input::placeholder {
		color: white;
		opacity: 1;
	}

	input, select {
		border-radius: 4px;
		border: 3px solid #FFF;
		background: transparent;
		color: white;
		font-family: "Clash Display", serif;
		font-weight: 500;
		padding: 0.2rem;
		width: 10rem;
		box-sizing: content-box;
	}

	select option {
		background-color: black;
	}

	input:focus {
		outline: none;
	}

	.filters-top, .filters-bottom {
		gap: 1rem;
		display: flex;
		align-items: center;
	}

	.reset-btn, .sort-order-btn {
		border-radius: 4px;
		border: 3px solid #FFF;
		color: white;
		font-family: "Clash Display", serif;
		font-weight: 500;
		padding: 0.2rem;
		width: 10rem;
		box-sizing: content-box;
		background-image: linear-gradient(to right, #FFF, #FFF);
		background-position: 0 100%;
		background-repeat: no-repeat;
		background-size: 100% 0;
		transition: background-size 0.4s cubic-bezier(0.22, 1, 0.36, 1), color 0.4s cubic-bezier(0.22, 1, 0.36, 1);
		background-color: transparent;
	}

	@media (max-width: 768px) {
		.filters-top, .filters-bottom {
			flex-direction: column;
			gap: 0.5rem;
		}

		input, select, .reset-btn, .sort-order-btn {
			border-width: 2px;
			font-size: 0.8rem;
		}
	}

	.filter {
		height: 1rem;
	}

	.sort-order-btn {
		fill: white;
		width: 2rem !important;
	}

	.reset-btn:hover, .sort-order-btn:hover {
		cursor: pointer;
		color: #000;
		background-size: 100% 100%;
		font-weight: 500;
	}

	.sort-order-btn:hover {
		fill: #000;
	}

	#scroll-btn {
		background-color: #232323;
		border-radius: 100%;
		border: none;
		fill: #aeaeae;
		height: 3rem;
		left: calc(100vw - 4.5rem);
		opacity: 60%;
		padding: 0.8rem;
		position: absolute;
		top: calc(100vh - 5rem);
		transition: all .4s;
		width: 3rem;
		z-index: 9999999999999;
	}

	#scroll-btn:hover {
		opacity: 100%;
		cursor: pointer;
		transform: scale(1.1);
	}
</style>

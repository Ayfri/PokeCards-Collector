---
import {getCards, getRarities, getSets, getTypes} from '../helpers/data';
import Layout from '../layouts/Layout.astro';
import Card from "../components/Card.astro";
import PageTitle from "../components/PageTitle.astro";


const types = await getTypes();
const rarity = await getRarities();
const sets = await getSets();

let cards = await getCards();
cards = cards.filter((card, index, self) => card.pokemon && self.findIndex(c => c.pokemon.id === card.pokemon.id) === index);
cards = cards.sort((a, b) => a.pokemon.id - b.pokemon.id || b.price - a.price);
cards = cards.map(card => {
	card.price ||= 100_000;
	return card;
});
---

<Layout
	title="Card List"
	image={{
		url: "https://pokestore.ayfri.com/pokestore.png",
		alt: "Pokémon TCG Card List",
	}}
>
	<main class="p-2 max-lg:px-0 text-white text-lg flex flex-col h-[calc(100lvh-3rem)] gap-2 mb-40">
		<button
			id="scroll-btn"
			class="absolute right-3 lg:right-6 bottom-6 lg:bottom-8 size-12 z-50 opacity-50 border-white border-solid border-2 rounded-full bg-black fill-white p-2 cursor-pointer transition-all ease-in-out duration-300 hover:scale-110 hover:opacity-100"
		>
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
				<path
					d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"
				/>
			</svg>
		</button>

		<div class="w-full mx-auto max-lg:px-2">
			<div class="flex max-lg:flex-col justify-between mx-28 max-lg:m-0 pb-2 lg:pb-3 items-center border-b-white border-b-[6px] max-lg:border-b-4">
				<PageTitle title="Card List"/>
				<div class="flex flex-col max-lg:flex-row items-end gap-3 leading-normal max-lg:-mt-1.5">
					<div class="flex items-center gap-4 max-lg:flex-col max-lg:gap-1.5">
						<button class="sort-order-btn fill-white !w-8 hover:fill-black" data-sort="asc">
							<svg class="inline align-text-top" xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512">
								<path d="M151.6 42.4C145.5 35.8 137 32 128 32s-17.5 3.8-23.6 10.4l-88 96c-11.9 13-11.1 33.3 2 45.2s33.3 11.1 45.2-2L96 146.3V448c0 17.7 14.3 32 32 32s32-14.3 32-32V146.3l32.4 35.4c11.9 13 32.2 13.9 45.2 2s13.9-32.2 2-45.2l-88-96zM320 480h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32z"/>
							</svg>
						</button>
						<button class="reset-btn">Reset filters</button>
						<input type="text" placeholder="ID" name="numero" class="filter" id="numero">
						<input type="text" placeholder="Name" name="name" class="filter" id="name">
					</div>
					<div class="flex items-center gap-4 max-lg:flex-col max-lg:gap-1.5">
						<output class="text-gold-400 text-[1rem] font-semibold lg:mr-4 max-lg:-mb-2">Cards :
							<span>{cards.length}</span>
						</output>
						<select name="sort" id="sort" class="filter">
							<option value="sort-numero" selected>Sort by pokédex</option>
							<option value="sort-price">Sort by price</option>
							<option value="sort-name">Sort by name</option>
						</select>
						<select name="set" id="set" class="filter">
							<option value="all" selected>All sets</option>
							{sets.sort((a, b) => a.name.localeCompare(b.name))
							     .map(set =>
								     <option value={set.name.toLowerCase()}>{set.name}</option>)}
						</select>
						<select name="type" id="type" class="filter">
							<option value="all" selected>All types</option>
							{types.sort((a, b) => a.localeCompare(b))
							      .map(type =>
								      <option value={type.toLowerCase()}>{type}</option>)}
						</select>
						<select name="rarity" id="rarity" class="filter">
							<option value="all" selected>All rarities</option>
							{rarity.sort((a, b) => a.localeCompare(b))
							       .map(rarity =>
								       <option value={rarity.toLowerCase()}>{rarity}</option>)}
						</select>
					</div>
				</div>
			</div>
		</div>

		<div class="grid grid-cols-[repeat(auto-fit,minmax(30rem,1fr))] place-items-center justify-center w-full overflow-y-scroll overflow-x-hidden scrollbar-hide">
			{cards.map(card =>
				<Card card={card}/>,
			)}
		</div>
	</main>
</Layout>

<script>
	/*SCROLL BUTTON*/
	const scrollBtn = document.querySelector<HTMLButtonElement>('#scroll-btn');
	scrollBtn!.addEventListener('click', () => {
		const cardsGrid = document.querySelector<HTMLDivElement>('.cards-grid');
		cardsGrid!.scrollTo({
			top: cardsGrid!.scrollHeight,
			behavior: 'smooth',
		});
	});

	const filters = {
		numero: document.querySelector<HTMLInputElement>('#numero')!,
		name: document.querySelector<HTMLInputElement>('#name')!,
		type: document.querySelector<HTMLSelectElement>('#type')!,
		rarity: document.querySelector<HTMLSelectElement>('#rarity')!,
		set: document.querySelector<HTMLSelectElement>('#set')!,
		sort: document.querySelector<HTMLSelectElement>('#sort')!,
	};

	const cardsCount = document.querySelector<HTMLSpanElement>('.filters-result span')!;

	const cards = Array.from(document.querySelectorAll<HTMLDivElement>('.card-link'));

	function applyFilters() {
		const numeroFilter = filters.numero.value.trim();
		const nameFilter = filters.name.value.trim().toLowerCase();
		const typeFilter = filters.type.value.toLowerCase();
		const rarityFilter = filters.rarity.value;
		const setFilter = filters.set.value;

		localStorage.setItem('filters', JSON.stringify({
			numero: numeroFilter,
			name: nameFilter,
			type: typeFilter,
			rarity: rarityFilter,
			set: setFilter,
		}));

		let visibleCount = 0;

		cards.forEach(card => {
			const matchesNumero = !numeroFilter || card.dataset.numero === numeroFilter;
			const matchesName = !nameFilter || card.dataset.name!.includes(nameFilter);
			const types = card.dataset.types!.split(',');
			const matchesType = typeFilter === 'all' || types.includes(typeFilter);
			const matchesRarity = rarityFilter === 'all' || card.dataset.rarity === rarityFilter;
			const matchesSet = setFilter === 'all' || card.dataset.set === setFilter;

			if (matchesNumero && matchesName && matchesType && matchesRarity && matchesSet) {
				card.classList.remove('hidden');
				visibleCount++;
			} else {
				card.classList.add('hidden');
			}
		});

		cardsCount.textContent = `${visibleCount}`;

		sortCards();
	}

	function sortCards() {
		const sortValue = filters.sort.value;
		const cardsContainer = document.querySelector<HTMLDivElement>('.cards-grid')!;
		const sortedCards = Array.from(cards).filter(card => !card.classList.contains('hidden'));
		const reversed = document.querySelector<HTMLButtonElement>('.sort-order-btn')!.dataset.sort === 'desc';

		sortedCards.sort((a, b) => {
			if (reversed) {
				[
					a,
					b,
				] =
					[
						b,
						a,
					];
			}
			switch (sortValue) {
				case 'sort-numero':
					return parseInt(a.dataset.numero!) - parseInt(b.dataset.numero!);
				case 'sort-price':
					return parseInt(a.dataset.price!) - parseInt(b.dataset.price!);
				case 'sort-name':
					return a.dataset.name!.localeCompare(b.dataset.name!);
				default:
					return 0;
			}
		});

		cardsContainer.innerHTML = '';
		sortedCards.forEach(card => cardsContainer.appendChild(card));
	}

	Object.values(filters).forEach(filter => filter.addEventListener('change', applyFilters));

	document.querySelector<HTMLButtonElement>('.reset-btn')!.addEventListener('click', () => {
		Object.values(filters).forEach(filter => {
			if (filter.tagName === 'SELECT') {
				filter.value = 'all';
			} else {
				filter.value = '';
			}
		});
		applyFilters();
	});

	const sortOrderButton = document.querySelector<HTMLButtonElement>('.sort-order-btn');
	sortOrderButton!.addEventListener('click', () => {
		const sortOrder = sortOrderButton!.dataset.sort === 'asc' ? 'desc' : 'asc';
		sortOrderButton!.dataset.sort = sortOrder;

		if (sortOrder === 'asc') {
			sortOrderButton!.innerHTML =
				`<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512"><path d="M151.6 42.4C145.5 35.8 137 32 128 32s-17.5 3.8-23.6 10.4l-88 96c-11.9 13-11.1 33.3 2 45.2s33.3 11.1 45.2-2L96 146.3V448c0 17.7 14.3 32 32 32s32-14.3 32-32V146.3l32.4 35.4c11.9 13 32.2 13.9 45.2 2s13.9-32.2 2-45.2l-88-96zM320 480h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32z"/></svg>`;
		} else {
			sortOrderButton!.innerHTML =
				`<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512"><path d="M151.6 469.6C145.5 476.2 137 480 128 480s-17.5-3.8-23.6-10.4l-88-96c-11.9-13-11.1-33.3 2-45.2s33.3-11.1 45.2 2L96 365.7V64c0-17.7 14.3-32 32-32s32 14.3 32 32V365.7l32.4-35.4c11.9-13 32.2-13.9 45.2-2s13.9 32.2 2 45.2l-88 96zM320 480c-17.7 0-32-14.3-32-32s14.3-32 32-32h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H320z"/></svg>`;
		}
		applyFilters();
	});

	if (localStorage.getItem('filters')) {
		const filters = JSON.parse(localStorage.getItem('filters')!);
		Object.entries(filters).forEach(([key, value]) => {
			const filter = document.querySelector<HTMLInputElement | HTMLSelectElement>(`#${key}`);
			if (filter) {
				filter.value = String(value);
			}
		});
		applyFilters();
	}
</script>

<style>
	body {
		overflow: hidden;
	}

	select:hover {
		cursor: pointer;
	}

	input::placeholder {
		color: white;
		opacity: 1;
	}

	input, select, button {
		font-size: 0.8rem;
	}

	input, select {
		background: transparent;
		border-radius: 4px;
		border: 3px solid #FFF;
		box-sizing: content-box;
		color: white;
		font-family: "Clash Display", serif;
		font-weight: 500;
		height: 1rem;
		padding: 0.2rem 0.4rem;
		width: 10rem;
	}

	select option {
		background-color: black;
	}

	input:focus {
		outline: none;
	}

	.reset-btn, .sort-order-btn {
		background-color: transparent;
		background-image: linear-gradient(to right, #FFF, #FFF);
		background-position: 0 100%;
		background-repeat: no-repeat;
		background-size: 100% 0;
		border-radius: 4px;
		border: 3px solid #FFF;
		box-sizing: content-box;
		color: white;
		font-weight: 500;
		height: 1rem;
		padding: 0.2rem 0.4rem;
		transition: background-size 0.4s cubic-bezier(0.22, 1, 0.36, 1), color 0.4s cubic-bezier(0.22, 1, 0.36, 1);
		width: 10rem;
	}

	@media (max-width: 1024px) {
		input, select, .reset-btn, .sort-order-btn {
			border-width: 2px;
			font-size: 0.8rem;
		}
	}

	.reset-btn:hover, .sort-order-btn:hover {
		cursor: pointer;
		color: #000;
		background-size: 100% 100%;
		font-weight: 500;
	}
</style>

---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import CardList from "../components/CardList.astro";
import PageTitle from "../components/PageTitle.astro";


export interface Card {
	name: string;
	imageUrl: string;
	types: string;
	rarity: string;
	price: number;
	pokemon: Pokemon;
}

export interface Pokemon {
	numero: number;
	name: string;
	description: string;
	imageUrl: string;
	types: string;
}

const typesList = await fetch(`${import.meta.env.API_URL}/types`);
const types = await typesList.json() as string[];

const rarityList = await fetch(`${import.meta.env.API_URL}/rarity`);
const rarity = await rarityList.json() as string[];

const searchParams = Astro.url.searchParams;
const typesParam = searchParams.has('types') ? searchParams.get('types') : null;
const rarityParam = searchParams.has('rarity') ? searchParams.get('rarity') : null;

if (typesParam && (typesParam === 'all' || !types.map(type => type.toLowerCase()).includes(typesParam))) {
	Astro.url.searchParams.delete('types');
	return Astro.redirect(Astro.url.href);
}

if (rarityParam && (rarityParam === 'all' || !rarity.map(rarity => rarity.toLowerCase()).includes(rarityParam))) {
	Astro.url.searchParams.delete('rarity');
	return Astro.redirect(Astro.url.href);
}

const response = await fetch(`${import.meta.env.API_URL}/cards?${searchParams.toString()}`);
let cards = await response.json() as Card[];
cards = cards.sort((a, b) => a.pokemon.numero - b.pokemon.numero || b.price - a.price);
cards = cards.filter((card, index, self) => self.findIndex(c => c.pokemon.numero === card.pokemon.numero) === index);
---

<Layout title="Pokéstore">
	<main>
		<button id="scroll-btn" class="scroll-btn">↓</button>
		<div class="fixed_container">
			<Header
				cards_href="/cards"
				username="anta"
				cart_icon="/icons/cart.svg"
				cart_href="/cart"
			>
			</Header>
			<div class="top-container">
				<PageTitle title="Card List"></PageTitle>
				<div class="filters-container">
					<div class="filters-top">
						<!--todo: add a button to reset filters-->
						<input type="text" placeholder="ID" class="filter">
						<input type="text" placeholder="Name" class="filter">
					</div>
					<div class="filters-bottom">
						<select name="set" id="set" class="filter">
							<option value="fire">sws</option>
							<option value="water">xy</option>
						</select>
						<select name="type" id="type" class="filter">
							<option value="all">All types</option>
							{types.sort((a, b) => a.localeCompare(b))
								.map(type =>
									<option value={type.toLowerCase()}>{type}</option>)}
						</select>
						<select name="rarity" id="rarity" class="filter">
							<option value="all">All rarities</option>
							{rarity.sort((a, b) => a.localeCompare(b))
								.map(rarity =>
									<option value={rarity.toLowerCase()}>{rarity}</option>)}
						</select>
					</div>
				</div>
			</div>
		</div>
		<div class="cards-grid">
			{cards.map(card =>
				<CardList card={card}/>)}
		</div>
	</main>
	<script>
		/*TYPE FILTER*/
		const selectType = document.querySelector('#type') as HTMLSelectElement;
		let currentType = new URL(window.location.href).searchParams.get('types');
		const options = Array.from(selectType.options).map(option => option.value.toLowerCase());
		if (!options.includes(currentType)) {
			currentType = 'all';
		}
		selectType.value = currentType || 'all';

		addFilterToUrl(selectType, 'types');

		/*RARITY FILTER*/
		const selectRarity = document.querySelector('#rarity') as HTMLSelectElement;
		let currentRarity = new URL(window.location.href).searchParams.get('rarity');
		const optionsRarity = Array.from(selectRarity.options).map(option => option.value.toLowerCase());
		if (!optionsRarity.includes(currentRarity)) {
			currentRarity = 'all';
		}
		selectRarity.value = currentRarity || 'all';

		addFilterToUrl(selectRarity, 'rarity');

		/*SCROLL BUTTON*/
		const scrollBtn = document.querySelector('#scroll-btn') as HTMLButtonElement;
		scrollBtn.addEventListener('click', () => {
			const cardsGrid = document.querySelector('.cards-grid') as HTMLDivElement;
			cardsGrid.scrollTo({top: cardsGrid.scrollHeight, behavior: 'smooth'});
		});

		function addFilterToUrl(element, paramName) {
			element.addEventListener('change', (event) => {
				const target = event.target as HTMLSelectElement;
				const url = new URL(window.location.href);
				url.searchParams.set(paramName, target.value);
				if (target.value === 'all') {
					url.searchParams.delete(paramName);
				}
				window.location.href = url.toString();
			});
		}
	</script>
</Layout>
<style>
	:root {
		--header-padding: 0.6rem;
	}

	body {
		overflow: hidden;
	}

	main {
		padding: var(--header-padding);
		color: white;
		font-size: 20px;
		line-height: 1.6;
		max-width: 100vw;
		max-height: 100vh;
		margin-bottom: 10rem;
	}

	.fixed_container {
		position: fixed;
		z-index: 99999;
		width: calc(100% - var(--header-padding) * 2);
	}

	.cards-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(30rem, 1fr));
		place-items: center;
		margin-top: 12.5rem;
		overflow-y: scroll;
		height: 76vh;
		scroll-behavior: smooth;
	}

	.cards-grid::-webkit-scrollbar, html::-webkit-scrollbar, body::-webkit-scrollbar {
		display: none;
	}

	.cards-grid, html, body {
		scrollbar-width: none;
	}

	.top-container {
		display: flex;
		justify-content: space-between;
		margin-left: 7rem;
		margin-right: 7rem;
		align-items: center;
		border-bottom: white solid 6px;
	}

	.filters-container {
		display: flex;
		flex-flow: column;
		align-items: flex-end;
		gap: 1rem;
	}

	input::placeholder {
		color: white;
		opacity: 1;
	}

	input, select {
		border-radius: 4px;
		border: 3px solid #FFF;
		background: transparent;
		color: white;
		font-family: "Clash Display", serif;
		font-weight: 500;
		padding: 0.2rem;
		width: 10rem;
		box-sizing: content-box;
	}

	input:focus {
		outline: none;
	}

	.filters-top, .filters-bottom {
		gap: 1rem;
		display: flex;
	}

	#scroll-btn {
		position: absolute;
		z-index: 9999999999999999999999999999999999999;
		top: 90vh;
		left: 95vw;
		border: none;
		border-radius: 100%;
		padding: 1rem;
		width: 3rem;
		height: 3rem;
		opacity: 60%;
		background-color: #232323;
		color: #aeaeae;
		transition: all .4s;
	}

	#scroll-btn:hover {
		opacity: 100%;
		cursor: pointer;
		transform: scale(1.1);
	}
</style>

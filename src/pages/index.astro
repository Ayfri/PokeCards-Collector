---
import {getCards, getPokemons, getRarities, getSets, getTypes} from '../helpers/data';
import Layout from '../layouts/Layout.astro';
import CardList from "../components/CardList.astro";
import PageTitle from "../components/PageTitle.astro";
import type {Card, Set} from "../types";


const filters = [
	'numero',
	'types',
	'rarity',
	'set',
	'name',
	'sort',
	'order',
];
const orders = [
	'asc',
	'desc',
];

const types = await getTypes();
const rarity = await getRarities();
const sets = await getSets();

const searchParams = Astro.url.searchParams;
const typesParam = searchParams.has('types') ? searchParams.get('types') : null;
const rarityParam = searchParams.has('rarity') ? searchParams.get('rarity') : null;
const setParam = searchParams.has('set') ? searchParams.get('set') : null;
const numeroParam = searchParams.has('numero') ? searchParams.get('numero') : null;
const sortParam = searchParams.has('sort') ? searchParams.get('sort') : null;
const orderParam = searchParams.has('order') ? searchParams.get('order') : null;

if (typesParam && (typesParam === 'all' || !types.map(type => type.toLowerCase()).includes(typesParam))) {
	Astro.url.searchParams.delete('types');
	return Astro.redirect(Astro.url.href);
}

if (rarityParam && (rarityParam === 'all' || !rarity.map(rarity => rarity.toLowerCase()).includes(rarityParam))) {
	Astro.url.searchParams.delete('rarity');
	return Astro.redirect(Astro.url.href);
}

if (setParam && (setParam === 'all' || !sets.map(set => set.name.toLowerCase()).includes(setParam))) {
	Astro.url.searchParams.delete('set');
	return Astro.redirect(Astro.url.href);
}

if (numeroParam && !(parseInt(numeroParam) >= 1 && parseInt(numeroParam) <= numberOfPokemons)) {
	Astro.url.searchParams.delete('numero');
	return Astro.redirect(Astro.url.href);
}

if (orderParam && !orders.includes(orderParam)) {
	Astro.url.searchParams.delete('order');
	return Astro.redirect(Astro.url.href);
}

if (!orderParam) {
	Astro.url.searchParams.set('order', 'asc');
	return Astro.redirect(Astro.url.href);
}

for (const [key,] of searchParams.entries()) {
	if (!filters.includes(key)) {
		Astro.url.searchParams.delete(key);
		return Astro.redirect(Astro.url.href);
	}
}

let cards = await getCards();
const pokemons = await getPokemons();
cards.map(card => card.pokemon = pokemons.find(pokemon => pokemon.id === parseInt(card.numero)));

cards = cards.filter(card => card.pokemon);

cards = cards.sort((a, b) => a.pokemon.id - b.pokemon.id || b.price - a.price);
const searchParamSize = new Map(searchParams.entries()).size;

// keep first card of each Pokémon
if (
	searchParamSize === 0 ||
	sortParam && searchParamSize === 1 ||
	sortParam && orderParam && searchParamSize === 2 ||
	orderParam && searchParamSize === 1
) {
	cards = cards.filter((card, index, self) => self.findIndex(c => c.pokemon.id === card.pokemon.id) === index);
}

if (orderParam === 'desc' && searchParamSize === 1) {
	cards = cards.reverse();
}

if (searchParamSize === 1 && orderParam === 'asc') {
	Astro.url.searchParams.set('sort', 'numero');
	return Astro.redirect(Astro.url.href);
}

cards.map(card => card.price ||= 100_000);
switch (sortParam) {
	case 'numero':
		cards = cards.sort((a, b) => a.pokemon.id - b.pokemon.id || a.price - b.price);
		if (orderParam === 'desc') {
			cards = cards.sort((a, b) => b.pokemon.id - a.pokemon.id || b.price - a.price);
		}
		break;
	case 'price':
		cards = cards.sort((a, b) => a.price - b.price || a.pokemon.id - b.pokemon.id);
		if (orderParam === 'desc') {
			cards = cards.sort((a, b) => b.price - a.price || a.pokemon.id - b.pokemon.id);
		}
		break;
	case 'name':
		cards = cards.sort((a, b) => a.pokemon.name.localeCompare(b.pokemon.name) || b.price - a.price);
		if (orderParam === 'desc') {
			cards = cards.sort((a, b) => b.pokemon.name.localeCompare(a.pokemon.name) || b.price - a.price);
		}
		break;
}
---

<Layout title="Pokéstore">
	<main>
		<button id="scroll-btn" class="scroll-btn">
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
				<path
					d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"
				/>
			</svg>
		</button>
		<div class="fixed-container">
			<div class="top-container">
				<PageTitle title="Card List"></PageTitle>
				<div class="filters-container">
					<div class="filters-top">
						<button class="sort-order-btn filter"></button>
						<button class="reset-btn filter">Reset filters</button>
						<input type="text" placeholder="ID" name="numero" class="filter">
						<input type="text" placeholder="Name" name="name" class="filter">
					</div>
					<div class="filters-bottom">
						<output class="filters-result">Cards : {cards.length}</output>
						<select name="sort" id="sort" class="filter">
							<option value="sort-numero">Sort by pokédex</option>
							<option value="sort-price">Sort by price</option>
							<option value="sort-name">Sort by name</option>
						</select>
						<select name="set" id="set" class="filter">
							<option value="all">All sets</option>
							{sets.sort((a, b) => a.name.localeCompare(b.name))
							     .map(set =>
								     <option value={set.name.toLowerCase()}>{set.name}</option>)}
						</select>
						<select name="type" id="type" class="filter">
							<option value="all">All types</option>
							{types.sort((a, b) => a.localeCompare(b))
							      .map(type =>
								      <option value={type.toLowerCase()}>{type}</option>)}
						</select>
						<select name="rarity" id="rarity" class="filter">
							<option value="all">All rarities</option>
							{rarity.sort((a, b) => a.localeCompare(b))
							       .map(rarity =>
								       <option value={rarity.toLowerCase()}>{rarity}</option>)}
						</select>
					</div>
				</div>
			</div>
		</div>

		<div class="cards-grid">
			{cards.map(card =>
				<CardList card={card}/>)}
		</div>
	</main>
	<script>
		import {POKEMONS_COUNT} from '../constants';

		/*TYPE FILTER*/
		const selectType = document.querySelector('#type') as HTMLSelectElement;
		let currentType = new URL(window.location.href).searchParams.get('types');
		const options = Array.from(selectType.options).map(option => option.value.toLowerCase());
		if (!currentType || !options.includes(currentType)) {
			currentType = 'all';
		}
		selectType.value = currentType || 'all';

		addFilterToUrl(selectType, 'types', 'all', false);

		/*RARITY FILTER*/
		const selectRarity = document.querySelector('#rarity') as HTMLSelectElement;
		let currentRarity = new URL(window.location.href).searchParams.get('rarity');
		const optionsRarity = Array.from(selectRarity.options).map(option => option.value.toLowerCase());
		if (!currentRarity || !optionsRarity.includes(currentRarity)) {
			currentRarity = 'all';
		}
		selectRarity.value = currentRarity || 'all';

		addFilterToUrl(selectRarity, 'rarity', 'all', false);

		/*SET FILTER*/
		const selectSet = document.querySelector('#set') as HTMLSelectElement;
		let currentSet = new URL(window.location.href).searchParams.get('set');
		const optionsSet = Array.from(selectSet.options).map(option => option.value.toLowerCase());
		if (!currentSet || !optionsSet.includes(currentSet)) {
			currentSet = 'all';
		}
		selectSet.value = currentSet || 'all';

		addFilterToUrl(selectSet, 'set', 'all', false);

		/*NUMERO FILTER*/
		const inputNumero = document.querySelector('input[name="numero"]') as HTMLInputElement;
		let currentNumero = parseInt(new URL(window.location.href).searchParams.get('numero') ?? '');
		if (currentNumero && !(currentNumero >= 1 && currentNumero <= POKEMONS_COUNT)) currentNumero = null;

		inputNumero.value = currentNumero?.toString() ?? '';

		addFilterToUrl(inputNumero, 'numero', '', false);

		/*NAME FILTER*/
		const inputName = document.querySelector('input[name="name"]') as HTMLInputElement;
		const currentName = new URL(window.location.href).searchParams.get('name');
		inputName.value = currentName || '';

		addFilterToUrl(inputName, 'name', '', false);

		/*SORT FILTER*/
		const selectSort = document.querySelector('#sort') as HTMLSelectElement;
		let currentSort = new URL(window.location.href).searchParams.get('sort');
		currentSort = currentSort ? `sort-${currentSort}` : null;

		const optionsSort = Array.from(selectSort.options).map(option => option.value.toLowerCase());
		if (!currentSort || !optionsSort.includes(currentSort)) {
			currentSort = 'sort-numero';
		}
		selectSort.value = currentSort ?? '';

		addFilterToUrl(selectSort, 'sort', '', true);

		/*RESET BUTTON*/
		const resetBtn = document.querySelector('.reset-btn') as HTMLButtonElement;

		resetBtn.addEventListener('click', () => {
			window.location.href = new URL(window.location.href).origin;
		});

		/*ORDER BUTTON*/
		const orderBtn = document.querySelector('.sort-order-btn') as HTMLButtonElement;
		const url = new URL(window.location.href);
		const order = url.searchParams.get('order');

		if (order === 'asc') {
			orderBtn.innerHTML =
				`<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512"><path d="M151.6 42.4C145.5 35.8 137 32 128 32s-17.5 3.8-23.6 10.4l-88 96c-11.9 13-11.1 33.3 2 45.2s33.3 11.1 45.2-2L96 146.3V448c0 17.7 14.3 32 32 32s32-14.3 32-32V146.3l32.4 35.4c11.9 13 32.2 13.9 45.2 2s13.9-32.2 2-45.2l-88-96zM320 480h32c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128h96c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H480c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32zm0-128H544c17.7 0 32-14.3 32-32s-14.3-32-32-32H320c-17.7 0-32 14.3-32 32s14.3 32 32 32z"/></svg>`;
		} else if (order === 'desc') {
			orderBtn.innerHTML =
				`<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512"><path d="M151.6 469.6C145.5 476.2 137 480 128 480s-17.5-3.8-23.6-10.4l-88-96c-11.9-13-11.1-33.3 2-45.2s33.3-11.1 45.2 2L96 365.7V64c0-17.7 14.3-32 32-32s32 14.3 32 32V365.7l32.4-35.4c11.9-13 32.2-13.9 45.2-2s13.9 32.2 2 45.2l-88 96zM320 480c-17.7 0-32-14.3-32-32s14.3-32 32-32h32c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32h96c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32H480c17.7 0 32 14.3 32 32s-14.3 32-32 32H320zm0-128c-17.7 0-32-14.3-32-32s14.3-32 32-32H544c17.7 0 32 14.3 32 32s-14.3 32-32 32H320z"/></svg>`;
		}

		orderBtn.addEventListener('click', () => {
			if (order === 'asc') {
				url.searchParams.set('order', 'desc');
			} else {
				url.searchParams.set('order', 'asc');
			}
			window.location.href = url.toString();
		});

		/*SCROLL BUTTON*/
		const scrollBtn = document.querySelector('#scroll-btn') as HTMLButtonElement;
		scrollBtn.addEventListener('click', () => {
			const cardsGrid = document.querySelector('.cards-grid') as HTMLDivElement;
			cardsGrid.scrollTo({
				top: cardsGrid.scrollHeight,
				behavior: 'smooth',
			});
		});

		function addFilterToUrl(element: HTMLElement, paramName: string, removeName: string, split: boolean) {
			element.addEventListener('change', event => {
				const target = event.target as HTMLSelectElement;
				const url = new URL(window.location.href);
				url.searchParams.set(paramName, split ? target.value.split('-')[1] : target.value);
				if (target.value === removeName) {
					url.searchParams.delete(paramName);
				}
				window.location.href = url.toString();
			});
		}
	</script>
</Layout>
<style>
	:root {
		--card-margin: 1rem;
		--header-padding: 0.6rem;
	}

	body {
		overflow: hidden;
	}

	main {
		padding: var(--header-padding);
		color: white;
		font-size: 20px;
		line-height: 1.6;
		display: flex;
		flex-direction: column;
		height: calc(100vh - 5rem);
		gap: 1rem;
		margin-bottom: 10rem;
	}

	.fixed-container {
		width: calc(100% - var(--header-padding) * 2);
	}

	.cards-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(30rem, 1fr));
		place-items: center;
		overflow-y: scroll;
		scroll-behavior: smooth;
	}

	.cards-grid::-webkit-scrollbar, html::-webkit-scrollbar, body::-webkit-scrollbar {
		display: none;
	}

	.cards-grid, html, body {
		scrollbar-width: none;
	}

	.top-container {
		display: flex;
		justify-content: space-between;
		margin-left: 7rem;
		margin-right: 7rem;
		align-items: center;
		border-bottom: white solid 6px;
	}

	.filters-container {
		display: flex;
		flex-flow: column;
		align-items: flex-end;
		gap: 1rem;
	}

	.filters-result {
		color: #fbc54a;
		font-weight: 600;
		font-size: 1rem;
	}

	select:hover {
		cursor: pointer;
	}

	input::placeholder {
		color: white;
		opacity: 1;
	}

	input, select {
		border-radius: 4px;
		border: 3px solid #FFF;
		background: transparent;
		color: white;
		font-family: "Clash Display", serif;
		font-weight: 500;
		padding: 0.2rem;
		width: 10rem;
		box-sizing: content-box;
	}

	select option {
		background-color: black;
	}

	input:focus {
		outline: none;
	}

	.filters-top, .filters-bottom {
		gap: 1rem;
		display: flex;
		align-items: center;
	}

	.reset-btn, .sort-order-btn {
		border-radius: 4px;
		border: 3px solid #FFF;
		color: white;
		font-family: "Clash Display", serif;
		font-weight: 500;
		padding: 0.2rem;
		width: 10rem;
		box-sizing: content-box;
		background-image: linear-gradient(to right, #FFF, #FFF);
		background-position: 0 100%;
		background-repeat: no-repeat;
		background-size: 100% 0;
		transition: background-size 0.4s cubic-bezier(0.22, 1, 0.36, 1), color 0.4s cubic-bezier(0.22, 1, 0.36, 1);
		background-color: transparent;
	}

	.filter {
		height: 1rem;
	}

	.sort-order-btn {
		fill: white;
		width: 2rem !important;
	}

	.reset-btn:hover, .sort-order-btn:hover {
		cursor: pointer;
		color: #000;
		background-size: 100% 100%;
		font-weight: 500;
	}

	.sort-order-btn:hover {
		fill: #000;
	}

	#scroll-btn {
		background-color: #232323;
		border-radius: 100%;
		border: none;
		fill: #aeaeae;
		height: 3rem;
		left: calc(100vw - 4.5rem);
		opacity: 60%;
		padding: 0.8rem;
		position: absolute;
		top: calc(100vh - 5rem);
		transition: all .4s;
		width: 3rem;
		z-index: 9999999999999;
	}

	#scroll-btn:hover {
		opacity: 100%;
		cursor: pointer;
		transform: scale(1.1);
	}
</style>

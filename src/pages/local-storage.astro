---
import type {Card, PokemonStats} from "../types";
import CartCard from "../components/CartCard.astro";
import PurchaseItem from "../components/PurchaseItem.astro";

export const prerender = false;

if (Astro.request.method !== 'POST') return "Bad route";

const body = await Astro.request.json() as Card[];
const outputJson = [] as PokemonStats[];
const pokemonStats: Record<string, PokemonStats> = {};
let totalPrice = 0;

body.forEach(item => {
	const pokemonName = item.pokemon.name;
	const pokemonPrice = item.price;

	if (pokemonStats[pokemonName]) {
		pokemonStats[pokemonName].cards.push(item);
		totalPrice += pokemonPrice;
	} else {
		pokemonStats[pokemonName] = {
			cards: [item],
			name: pokemonName,
		};
	}
});

for (const pokemonName in pokemonStats) {
	if (pokemonStats.hasOwnProperty(pokemonName)) {
		const stats = pokemonStats[pokemonName];
		outputJson.push(stats);
	}
}
---
<div class="cards">
	{body.map(card =>
		<CartCard
			name={card.pokemon.name}
			imageUrl={card.imageUrl}
			set={card.set.name}
			rarity={card.rarity}
			price={card.price}
		/>)}
</div>

<div class="cart-stats">
	{outputJson.map(item =>
		<PurchaseItem
			cards={item.cards}
			name={item.name}
		/>)}
</div>

<div class="total-price">
	<h3>Total</h3>
	<p>
		{
			outputJson.reduce(
				(acc, item) => acc + item.cards.reduce(
					(acc, card) => acc + card.price, 0,
				), 0,
			)
		} $
	</p>
</div>

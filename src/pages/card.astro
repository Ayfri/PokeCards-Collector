---
import Layout from '../layouts/Layout.astro';
import PageTitle from "../components/PageTitle.astro";
import PokemonType from "../components/PokemonType.astro";
import "../styles/colors.css";
import {Image} from "astro:assets";
import type {Card, Pokemon, Set} from "../types";

const filters = [
	'numero',
	'index',
];
const searchParams = Astro.url.searchParams;
const numeroParam = searchParams.has('numero') ? searchParams.get('numero') : null;

let centeredCardId = Astro.url.searchParams.get('index') ? parseInt(Astro.url.searchParams.get('index')) : 0;

const setsList = await fetch(`${import.meta.env.API_URL}/sets`);
const sets = await setsList.json() as Set[];

if (numeroParam && !(numeroParam >= 1 && numeroParam <= 151)) {
	Astro.url.searchParams.delete('numero');
	return Astro.redirect("/");
}

for (const [key, _] of searchParams.entries()) {
	if (!filters.includes(key)) {
		Astro.url.searchParams.delete(key);
		return Astro.redirect(Astro.url.href);
	}
}

const response = await fetch(`${import.meta.env.API_URL}/cards?${searchParams.toString()}`);
let cards = await response.json() as Card[];
cards = cards.sort((a, b) => a.pokemon.numero - b.pokemon.numero || b.price - a.price);

const setLogoFirstHalf = cards.slice(0, 5).map(card => card.set.imageUrl);
const setLogoSecondHalf = cards.slice(5, 10).map(card => card.set.imageUrl);
---

<Layout title="PokÃ©store">
	<main>
		<div class="filter"></div>
		<div class="main-container">
			<div class="top-container">
				<div class="card-container">
					<div class="left-card">
						{setLogoFirstHalf.map((card, index) =>
							<Image
								class:list={[`set ${index}`]}
								src={card} alt="Charizard"
								width="75"
								height="105"
							/>)}
					</div>
					<div class="center-card">
						<div class:list={cards[centeredCardId].rarity.toLowerCase()}></div>
						<div class:list={['card-aura', cards[centeredCardId].types.toLowerCase().split(',')[0]]}></div>
						<Image
							src={cards[centeredCardId].imageUrl} alt="Charizard"
							width="300"
							height="420"
						/>
					</div>
					<div class="right-card">
						{setLogoSecondHalf.map((card, index) =>
							<Image
								class:list={[`set ${index + 5}`]}

								src={card} alt="Charizard"
								width="75"
								height="105"
							/>)}
					</div>
				</div>
			</div>
			<div class="bottom-container">
				<PageTitle
					title={cards[0].pokemon.name}
				></PageTitle>
				<div class="bottom-half-bottom">
					<div class="left-space"></div>
					<div class="pokemon-info">
						<div class="types">
							{cards[centeredCardId].types.toLowerCase().split(',').map(type =>
								<PokemonType type={type}></PokemonType>)}
						</div>
						<p>
							{cards[0].pokemon.description}
						</p>
					</div>
					<div class="purchase-button">
						<p>{cards[centeredCardId].price} $</p>
						<button id="add-to-card" data-route={`${import.meta.env.API_URL}/cards/${cards[centeredCardId].id}`}>
							Add to cart
						</button>
					</div>
				</div>
			</div>
		</div>
		<div class="back-button"></div>
	</main>
</Layout>
<script>
	const sets = document.querySelectorAll('.set') as NodeListOf<HTMLImageElement>;
	sets.forEach(set => {
		set.addEventListener('click', () => {
			const index = set.classList[1];
			const url = new URL(window.location.href);
			url.searchParams.set('index', index);
			window.location.href = url.toString();
		});

		set.addEventListener('load', () => {
			set.classList.add('shadow');
		});
	});

	const cart = JSON.parse(localStorage.getItem('cart') || '[]') as Card[];
	const buyButton = document.querySelector('#add-to-card') as HTMLButtonElement;
	const cartCount = document.querySelector('#cart-count') as HTMLSpanElement;
	const route = buyButton.dataset.route;
	buyButton.addEventListener('click', async () => {
		const response = await fetch(route);
		const card = await response.json() as Card;
		if (cart.find(c => c.id === card.id)) return;
		cart.push(card);

		localStorage.setItem('cart', JSON.stringify(cart));
		buyButton.classList.add('success');
		cartCount.innerText = cart.length.toString();
	}, {once: true});

	if (cart.find(c => c.id === parseInt(route.split('/').pop() as string))) {
		buyButton.classList.add('success');
	}

	if (cart.length > 0) {
		cartCount.innerText = cart.length.toString();
	}
</script>

<style>
	main {
		margin: auto;
		padding: .6rem;
		color: white;
		font-size: 20px;
		line-height: 1.6;
		max-width: 100vw;
		max-height: 100vh;
	}

	.filter {
		background-image: url("/public/particles.png");
		background-repeat: no-repeat;
		width: 100%;
		height: 100%;
		z-index: -2;
		position: absolute;
		inset: 0 0 0 0;
	}

	.main-container {
		margin: 5rem auto 0 auto;
		display: flex;
		flex-direction: column;
		gap: 2rem;
		width: 90%;
		z-index: -1;
	}

	.top-container {
		height: 33rem;
	}

	.card-container {
		height: 100%;
		width: fit-content;
		margin: auto;
		display: flex;
		gap: 3rem;
	}

	.shadow {
		transition: all 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		filter: drop-shadow(0px 0px 2px rgb(243, 208, 44)) drop-shadow(3px 3px 3px #000);
	}

	.set:hover {
		cursor: pointer;
		transform: scale(1.05);
	}

	.left-card, .right-card {
		width: 60%;
		display: flex;
		align-items: center;
		justify-content: space-evenly;
		flex-direction: column;
		background-color: rgba(35, 35, 35, 0.75);
		border-radius: 1rem;
		border: #f3d02c solid 6px;
		padding: 1rem;
		height: 34rem;
		box-sizing: border-box;
	}

	.left-card > img, .right-card > img {
		width: 8.5rem;
		height: 5.5rem;
		object-fit: contain;
	}


	.center-card {
		position: relative;
	}

	.center-card > .card-aura {
		position: absolute;
		background-color: var(--type-color);
		width: 43rem;
		height: 43rem;
		z-index: -1;
		border-radius: 50%;
		filter: blur(5rem) opacity(0.5);
		left: 50%;
		top: 50%;
		transform: translateX(-50%) translateY(-50%);
	}

	.center-card > img {
		width: 24rem;
		height: 34rem;
		border-radius: 0.5rem;
	}

	.bottom-container {
		height: 15rem;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		align-items: center;
	}

	.bottom-half-bottom {
		height: 100%;
		width: 100%;
		display: flex;
		gap: 5rem;
		flex-direction: row;
		justify-content: space-between;
	}

	.left-space {
		width: 15%;
	}

	.pokemon-info {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		align-items: center;
	}

	.types {
		display: flex;
		gap: 1rem;
		flex-direction: row;
	}

	.pokemon-info > p {
		margin: 0;
		text-align: center;
	}

	.purchase-button {
		background-color: #232323;
		border-radius: 2rem;
		width: 15rem;
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 1rem 0;
	}

	.purchase-button > p {
		margin: 0;
	}

	#add-to-card {
		border: none;
		border-radius: 1rem;
		background-color: #ff9e00;
		cursor: pointer;
		font-size: 1.2rem;
		padding: 1rem;
		transition: all 0.2s ease-in-out;
	}

	#add-to-card:hover {
		background-color: #ffb444;
	}

	#add-to-card.success {
		background-color: #45d045;
		cursor: not-allowed;
		opacity: 0.5;
	}

	.back-button {
		background-color: #232323;
		border-radius: 2rem;
		height: 5rem;
		width: 5rem;
		position: fixed;
		bottom: 1rem;
	}

	.holo::after {
		background-image: url("https://assets.codepen.io/13471/sparkles.gif"), url(https://assets.codepen.io/13471/holo.png), linear-gradient(125deg, #ff008450 15%, #fca40040 30%, #ffff0030 40%, #00ff8a20 60%, #00cfff40 70%, #cc4cfa50 85%);
		background-position: 50% 50%;
		background-size: 160%;
		filter: brightness(1) contrast(1);
		mix-blend-mode: color-dodge;
		opacity: 70%;
		transition: all 0.33s ease;
		z-index: 2;
	}

	.holo::before,
	.holo::after {
		background-repeat: no-repeat;
		content: "";
		left: 50%;
		mix-blend-mode: color-dodge;
		position: absolute;
		top: 52%;
		transform: translate(-50%, -50%);
		transition: all 0.33s ease;
		width: 24rem;
		height: 34rem;
		border-radius: 0.5rem;
	}

	@-webkit-keyframes holoSparkle {
		0%, 100% {
			opacity: 0.75;
			background-position: 50% 50%;
			filter: brightness(1.2) contrast(1.25);
		}
		5%, 8% {
			opacity: 1;
			background-position: 40% 40%;
			filter: brightness(0.8) contrast(1.2);
		}
		13%, 16% {
			opacity: 0.5;
			background-position: 50% 50%;
			filter: brightness(1.2) contrast(0.8);
		}
		35%, 38% {
			opacity: 1;
			background-position: 60% 60%;
			filter: brightness(1) contrast(1);
		}
		55% {
			opacity: 0.33;
			background-position: 45% 45%;
			filter: brightness(1.2) contrast(1.25);
		}
	}

	@keyframes holoSparkle {
		0%, 100% {
			opacity: 0.75;
			background-position: 50% 50%;
			filter: brightness(1.2) contrast(1.25);
		}
		5%, 8% {
			opacity: 1;
			background-position: 40% 40%;
			filter: brightness(0.8) contrast(1.2);
		}
		13%, 16% {
			opacity: 0.5;
			background-position: 50% 50%;
			filter: brightness(1.2) contrast(0.8);
		}
		35%, 38% {
			opacity: 1;
			background-position: 60% 60%;
			filter: brightness(1) contrast(1);
		}
		55% {
			opacity: 0.33;
			background-position: 45% 45%;
			filter: brightness(1.2) contrast(1.25);
		}
	}

	@-webkit-keyframes holoGradient {
		0%, 100% {
			opacity: 0.5;
			background-position: 50% 50%;
			filter: brightness(0.5) contrast(1);
		}
		5%, 9% {
			background-position: 100% 100%;
			opacity: 1;
			filter: brightness(0.75) contrast(1.25);
		}
		13%, 17% {
			background-position: 0 0;
			opacity: 0.88;
		}
		35%, 39% {
			background-position: 100% 100%;
			opacity: 1;
			filter: brightness(0.5) contrast(1);
		}
		55% {
			background-position: 0 0;
			opacity: 1;
			filter: brightness(0.75) contrast(1.25);
		}
	}

	@keyframes holoGradient {
		0%, 100% {
			opacity: 0.5;
			background-position: 50% 50%;
			filter: brightness(0.5) contrast(1);
		}
		5%, 9% {
			background-position: 100% 100%;
			opacity: 1;
			filter: brightness(0.75) contrast(1.25);
		}
		13%, 17% {
			background-position: 0 0;
			opacity: 0.88;
		}
		35%, 39% {
			background-position: 100% 100%;
			opacity: 1;
			filter: brightness(0.5) contrast(1);
		}
		55% {
			background-position: 0 0;
			opacity: 1;
			filter: brightness(0.75) contrast(1.25);
		}
	}

	@-webkit-keyframes holoCard {
		0%, 100% {
			transform: rotateZ(0deg) rotateX(0deg) rotateY(0deg);
		}
		5%, 8% {
			transform: rotateZ(0deg) rotateX(6deg) rotateY(-20deg);
		}
		13%, 16% {
			transform: rotateZ(0deg) rotateX(-9deg) rotateY(32deg);
		}
		35%, 38% {
			transform: rotateZ(3deg) rotateX(12deg) rotateY(20deg);
		}
		55% {
			transform: rotateZ(-3deg) rotateX(-12deg) rotateY(-27deg);
		}
	}

	@keyframes holoCard {
		0%, 100% {
			transform: rotateZ(0deg) rotateX(0deg) rotateY(0deg);
		}
		5%, 8% {
			transform: rotateZ(0deg) rotateX(6deg) rotateY(-20deg);
		}
		13%, 16% {
			transform: rotateZ(0deg) rotateX(-9deg) rotateY(32deg);
		}
		35%, 38% {
			transform: rotateZ(3deg) rotateX(12deg) rotateY(20deg);
		}
		55% {
			transform: rotateZ(-3deg) rotateX(-12deg) rotateY(-27deg);
		}
	}

	@-webkit-keyframes rubberBand {
		from {
			transform: scale3d(1, 1, 1);
		}
		30% {
			transform: scale3d(1.25, 0.75, 1);
		}
		40% {
			transform: scale3d(0.75, 1.25, 1);
		}
		50% {
			transform: scale3d(1.15, 0.85, 1);
		}
		65% {
			transform: scale3d(0.95, 1.05, 1);
		}
		75% {
			transform: scale3d(1.05, 0.95, 1);
		}
		to {
			transform: scale3d(1, 1, 1);
		}
	}

	@keyframes rubberBand {
		from {
			transform: scale3d(1, 1, 1);
		}
		30% {
			transform: scale3d(1.25, 0.75, 1);
		}
		40% {
			transform: scale3d(0.75, 1.25, 1);
		}
		50% {
			transform: scale3d(1.15, 0.85, 1);
		}
		65% {
			transform: scale3d(0.95, 1.05, 1);
		}
		75% {
			transform: scale3d(1.05, 0.95, 1);
		}
		to {
			transform: scale3d(1, 1, 1);
		}
	}

	.loader {
		animation-duration: 4s;
		animation-fill-mode: forwards;
		animation-iteration-count: infinite;
		animation-name: placeHolderShimmer;
		animation-timing-function: linear;
		background: #f6f7f8;
		background: linear-gradient(to right, #afafaf 8%, #9a9999 38%, #afafaf 54%);
		background-size: auto;
		position: absolute;
		width: 300px;
		height: 420px;
		z-index: -1;
		border-radius: 0.5rem;
	}

	@keyframes placeHolderShimmer {
		0% {
			background-position: -468px 0
		}
		100% {
			background-position: 468px 0
		}
	}
</style>

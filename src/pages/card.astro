---
import Layout from '../layouts/Layout.astro';
import PageTitle from "../components/PageTitle.astro";
import "../styles/colors.css";
import {Image} from "astro:assets";
import type {Card, Pokemon, Set} from "../types";

const filters = [
	'numero',
	'index',
];
const searchParams = Astro.url.searchParams;
const numeroParam = searchParams.has('numero') ? searchParams.get('numero') : null;

const centeredCardId = Astro.url.searchParams.get('index') ? parseInt(Astro.url.searchParams.get('index')) : 0;

if (numeroParam && !(numeroParam >= 1 && numeroParam <= 151)) {
	Astro.url.searchParams.delete('numero');
	return Astro.redirect("/");
}

for (const [key, _] of searchParams.entries()) {
	if (!filters.includes(key)) {
		Astro.url.searchParams.delete(key);
		return Astro.redirect(Astro.url.href);
	}
}

const response = await fetch(`${import.meta.env.API_URL}/cards?${searchParams.toString()}`);
let cards = await response.json() as Card[];
cards = cards.sort((a, b) => a.pokemon.numero - b.pokemon.numero || b.price - a.price);

const setLogoFirstHalf = cards.slice(0, 5).map(card => card.set);
const setLogoSecondHalf = cards.slice(5, 10).map(card => card.set);
const centeredCard = cards[centeredCardId];
---
<Layout title="PokÃ©store">
	<main>
		<div class:list={[`filter ${cards[centeredCardId].types.toLowerCase().split(',')[0]}`]} id="filter"></div>
		<div class="main-container">
			<div class="top-container">
				<div class="card-container">
					<div class="left-card" id="sets">
						{setLogoFirstHalf.map((set, index) =>
							<Image
								alt={set.name}
								class:list={[`set ${index}`]}
								height="105"
								src={set.imageUrl}
								width="75"
							/>)}
					</div>
					<div
						class:list={[`center-card ${cards[centeredCardId].types.toLowerCase().split(',')[0]} ${cards[centeredCardId].rarity.toLowerCase()}`]}
						data-values={cards.map(card => card.rarity.toLowerCase())}
						id="center-card"
					>
						<div
							class:list={[
								'card-aura',
								centeredCard.types.toLowerCase().split(',')[0],
							]}
							id="card-aura"
						>
						</div>
						{
							cards.map((card, index) =>
								<img
									alt={card.pokemon.name}
									class:list={{
										image: true,
										hidden: index !== centeredCardId,
									}}
									decoding="async"
									loading="eager"
									height="420"
									src={card.imageUrl}
									width="300"
								/>,
							)
						}
					</div>
					<div class="right-card">
						{setLogoSecondHalf.map((set, index) =>
							<Image
								alt={set.name}
								class:list={[`set ${index + 5}`]}
								height="105"
								src={set.imageUrl}
								width="75"
							/>)}
					</div>
				</div>
			</div>
			<div class="bottom-container">
				<PageTitle title={centeredCard.pokemon.name}/>
				<div class="bottom-half-bottom">
					<div class="left-space"></div>
					<div class="pokemon-info">
						<div
							class="types"
							data-values={cards.map(card => card.types.toLowerCase().replace(',', ' ').split(','))}
							id="card-types"
						>
							{centeredCard.types.toLowerCase().split(',').map(type =>
								<p
									class:list={[
										'card-type',
										type,
									]}
								>
									{type}
								</p>,
							)}
						</div>
						<p>{centeredCard.pokemon.description}</p>
					</div>
					<div class="purchase-button">
						<p data-values={cards.map(card => card.price)} id="card-price">
							{centeredCard.price} $
						</p>
						<button
							data-route={`${import.meta.env.API_URL}/cards/${centeredCard.id}`}
							data-values={cards.map(card => card.id)}
							id="add-to-card"
						>
							Add to cart
						</button>
					</div>
				</div>
			</div>
		</div>
		<div class="back-button"></div>
	</main>
</Layout>
<script>
	import {getCart} from '../utils/cart';
	import type {Card} from '../types';

	const sets = document.querySelectorAll('.set') as NodeListOf<HTMLImageElement>;
	const url = new URL(window.location.href);
	const mainImages = document.querySelectorAll('.image') as NodeListOf<HTMLImageElement>;

	const addToCart = document.querySelector('#add-to-card') as HTMLButtonElement;
	const cardAura = document.querySelector('#card-aura') as HTMLDivElement;
	const cardPrice = document.querySelector('#card-price') as HTMLParagraphElement;
	const cardTypes = document.querySelector('#card-types') as HTMLDivElement;
	const centerCard = document.querySelector('#center-card') as HTMLDivElement;
	const filter = document.querySelector('#filter') as HTMLDivElement;

	let urlIndex = url.searchParams.get('index');

	function handleDynamicValue<T>(element: T, callback: (element: T, value: string) => void) {
		urlIndex = url.searchParams.get('index');
		const values = element.dataset.values?.split(',') as string[];
		const index = urlIndex ? parseInt(urlIndex as string) : 0;
		const value = values[index];
		callback(element, value);
	}

	sets.forEach(set => {
		if (urlIndex === set.classList[1]) {
			set.classList.add('shadow');
		}

		if (!urlIndex && set.classList[1] === '0') {
			set.classList.add('shadow');
		}

		set.addEventListener('click', () => {
			urlIndex = url.searchParams.get('index');

			const index = set.classList[1];
			url.searchParams.set('index', index);
			window.history.pushState({}, '', url.toString());

			mainImages.forEach(image => image.classList.add('hidden'));
			mainImages[index].classList.remove('hidden');

			sets.forEach(set => set.classList.remove('shadow'));
			sets[index].classList.add('shadow');

			handleDynamicValue(cardTypes, (element, value) => {
				const types = value.split(' ');
				const firstType = types[0].toLowerCase();
				element.innerHTML = types.map(type => `<p class="card-type ${type.toLowerCase()}">${type}</p>`).join('');

				filter.classList.remove(...filter.classList);
				filter.classList.add('filter', firstType);

				cardAura.classList.remove(...cardAura.classList);
				cardAura.classList.add('card-aura', firstType);

				const rarity = centerCard.dataset.values?.split(',')[index];
				centerCard.classList.remove(...centerCard.classList);
				centerCard.classList.add('center-card', firstType, ...rarity.split(' '), 'inactive');
			});

			handleDynamicValue(cardPrice, (element, value) => {
				element.textContent = `${value} $`;
			});

			handleDynamicValue(addToCart, (element, value) => {
				const cart = getCart();
				element.dataset.route = element.dataset.route?.replace(/\d+$/, value);
				if (cart.find(c => c.id === parseInt(value))) {
					element.classList.add('success');
				} else {
					element.classList.remove('success');
				}
			});
		});
	});

	const cart = getCart();
	const buyButton = document.querySelector('#add-to-card') as HTMLButtonElement;
	const cartCount = document.querySelector('#cart-count') as HTMLSpanElement;
	buyButton.addEventListener('click', async (event) => {
		const target = event.target as HTMLButtonElement;
		const route = target.dataset.route;
		const response = await fetch(route);
		const card = await response.json() as Card;

		if (cart.find(c => c.id === card.id)) return;
		cart.push(card);

		localStorage.setItem('cart', JSON.stringify(cart));
		buyButton.classList.add('success');
		cartCount.innerText = cart.length.toString();
	}, {once: true});

	if (cart.find(c => c.id === parseInt(buyButton.dataset.route.split('/').pop() as string))) {
		buyButton.classList.add('success');
	}

	/*CARD EFFECT*/
	const card = document.querySelector('.center-card') as HTMLDivElement;
	const style = document.getElementById('card') as HTMLStyleElement;

	card.addEventListener('mousemove', (e) => {
		card.classList.remove('inactive');
		const pos = [
			e.offsetX,
			e.offsetY,
		];
		e.preventDefault();
		const l = pos[0];
		const t = pos[1];
		const h = card.getBoundingClientRect().height;
		const w = card.getBoundingClientRect().width;
		const px = Math.abs(Math.floor(100 / w * l) - 100);
		const py = Math.abs(Math.floor(100 / h * t) - 100);
		const pa = (50 - px) + (50 - py);
		// math for gradient / background positions
		const lp = (50 + (px - 50) / 1.5);
		const tp = (50 + (py - 50) / 1.5);
		const px_spark = (50 + (px - 50) / 7);
		const py_spark = (50 + (py - 50) / 7);
		const p_opc = 20 + (Math.abs(pa) * 1.5);
		const ty = ((tp - 50) / 2) * -1;
		const tx = ((lp - 50) / 1.5) * .5;

		const grad_pos = `background-position: ${lp}% ${tp}%;`;
		const spark_pos = `background-position: ${px_spark}% ${py_spark}%;`;
		const opc = `opacity ${p_opc / 100};`;
		const tf = `transform: rotateX(${ty}deg) rotateY(${tx}deg);`;
		const style2 = `.holo:hover::before {${grad_pos}} !important`;
		const style3 = `.holo:hover::after {${spark_pos} ${opc}} !important`;
		card.setAttribute('style', tf);
		style.innerHTML = `${style2} \n${style3}}`;
	});

	card.addEventListener('mouseleave', () => {
		card.classList.add('inactive');
		card.removeAttribute('style');
		card.style.transform = `rotateY(0deg) rotateX(0deg)`;
		style.innerHTML = '';
	});

</script>

<style is:inline id="card"></style>
<style>
	main {
		margin: auto;
		padding: .6rem;
		color: white;
		font-size: 20px;
		line-height: 1.6;
		max-width: 100vw;
		max-height: 100vh;
	}

	.inactive {
		transition: all 3s cubic-bezier(0.22, 1, 0.36, 1) !important;
	}

	.filter::before {
		background-image: url("/public/particles.png");
		background-repeat: no-repeat;
		width: 100%;
		height: 100%;
		z-index: -2;
		position: absolute;
		inset: 0 0 0 0;
		content: "";
		filter: var(--filter);
	}

	.main-container {
		margin: 5rem auto 0 auto;
		display: flex;
		flex-direction: column;
		gap: 2rem;
		width: 90%;
		z-index: -1;
	}

	.top-container {
		height: 33rem;
	}

	.card-container {
		height: 100%;
		width: fit-content;
		margin: auto;
		display: flex;
		gap: 3rem;
	}

	.shadow {
		transition: all 0.6s cubic-bezier(0.22, 1, 0.36, 1);
		filter: drop-shadow(0px 0px 8px rgb(243, 208, 44)) drop-shadow(3px 3px 4px #000);
	}

	.set {
		transition: all .5s cubic-bezier(0.22, 1, 0.36, 1);
	}

	.set:hover {
		cursor: pointer;
		transform: scale(1.05);
	}

	.left-card, .right-card {
		width: 60%;
		display: flex;
		align-items: center;
		justify-content: space-evenly;
		flex-direction: column;
		background-color: rgba(35, 35, 35, 0.75);
		border-radius: 1rem;
		border: #f3d02c solid 6px;
		padding: 1rem;
		height: 34rem;
		box-sizing: border-box;
	}

	.left-card > img, .right-card > img {
		width: 8.5rem;
		height: 5.5rem;
		object-fit: contain;
	}

	.center-card {
		position: relative;
		transform-style: preserve-3d;
	}

	.center-card:hover {
		border-radius: 0.5rem !important;
		box-shadow: 0 0 30px -5px #ffffff70, 0 0 10px -2px #ffffff9e, 0 50px 20px 10px rgb(0, 0, 0);
	}

	.center-card > .card-aura {
		background-color: var(--type-color);
		border-radius: 50%;
		filter: blur(5rem) opacity(0.5);
		height: 43rem;
		left: 50%;
		pointer-events: none;
		position: absolute;
		top: 50%;
		transform: translateX(-50%) translateY(-50%);
		transition: all 0.3s ease-in-out;
		width: 43rem;
		z-index: -1;
	}

	@keyframes image-fade-in {
		0% {
			opacity: 0;
		}
		100% {
			opacity: 1;
		}
	}

	@keyframes image-fade-out {
		0% {
			opacity: 1;
		}
		100% {
			opacity: 0;
		}
	}

	.image {
		border-radius: 0.5rem !important;
		height: 34rem;
		width: 24rem;
	}

	.image.hidden {
		display: none;
	}

	.image:not(.hidden) {
		animation: image-fade-in 0.2s ease-in-out;
	}

	.bottom-container {
		height: 15rem;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		align-items: center;
	}

	.bottom-half-bottom {
		height: 100%;
		width: 100%;
		display: flex;
		gap: 5rem;
		flex-direction: row;
		justify-content: space-between;
	}

	.left-space {
		width: 15%;
	}

	.pokemon-info {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		align-items: center;
	}

	.types {
		display: flex;
		gap: 1rem;
		flex-direction: row;
	}

	:global(.card-type) {
		margin: 0;
		background-color: color-mix(in oklab, var(--type-color), white 50%);
		border: 1px solid var(--type-color);
		border-radius: 1rem;
		color: color-mix(in oklab, var(--type-color), black 25%);
		padding: 0.15rem 0.8rem;
	}

	.pokemon-info > p {
		margin: 0;
		text-align: center;
	}

	.purchase-button {
		background-color: #232323;
		border-radius: 2rem;
		width: 15rem;
		display: flex;
		flex-direction: column;
		align-items: center;
		padding: 1rem 0;
	}

	.purchase-button > p {
		margin: 0;
	}

	#add-to-card {
		border: none;
		border-radius: 1rem;
		background-color: #ff9e00;
		cursor: pointer;
		font-size: 1.2rem;
		padding: 1rem;
		transition: all 0.2s ease-in-out;
	}

	#add-to-card:hover {
		background-color: #ffb444;
	}

	#add-to-card.success {
		background-color: #45d045;
		cursor: not-allowed;
		opacity: 0.5;
	}

	.back-button {
		background-color: #232323;
		border-radius: 2rem;
		height: 5rem;
		width: 5rem;
		position: fixed;
		bottom: 1rem;
	}

	:global(.holo::after) {
		background-image: url("https://assets.codepen.io/13471/sparkles.gif"), url(https://assets.codepen.io/13471/holo.png), linear-gradient(125deg, #ff008450 15%, #fca40040 30%, #ffff0030 40%, #00ff8a20 60%, #00cfff40 70%, #cc4cfa50 85%);
		background-position: 50% 50%;
		background-size: 160%;
		filter: brightness(1) contrast(1);
		mix-blend-mode: color-dodge;
		opacity: 70%;
		transition: all 0.33s ease;
		z-index: 2;
		border-radius: 2.5rem !important;
	}

	.holo::before,
	.holo::after {
		background-repeat: no-repeat;
		content: "";
		left: 50%;
		mix-blend-mode: color-dodge;
		position: absolute;
		top: 52%;
		transform: translate(-50%, -50%);
		transition: all 0.33s ease;
		width: 24rem;
		height: 34rem;
		border-radius: 0.5rem !important;
	}

	.holo.active:after,
	.holo:hover:after {
		filter: brightness(1) contrast(1);
		opacity: 1;
		border-radius: 0.5rem !important;
	}

	.holo.active,
	.holo:hover {
		-webkit-animation: none;
		animation: none;
		transition: box-shadow 0.1s ease-out;
		border-radius: 0.5rem !important;
	}

	:global(.holo:hover::before) {
		-webkit-animation: none;
		animation: none;
		background-image: linear-gradient(110deg, transparent 25%, var(--type-color) 48%, var(--type-color2) 52%, transparent 75%);
		background-position: 50% 50%;
		background-size: 250% 250%;
		opacity: 0.88;
		filter: brightness(0.66) contrast(1.33);
		transition: none;
		border-radius: 0.5rem !important;
	}

	@keyframes placeHolderShimmer {
		0% {
			background-position: -468px 0
		}
		100% {
			background-position: 468px 0
		}
	}

	.loader {
		animation-duration: 4s;
		animation-fill-mode: forwards;
		animation-iteration-count: infinite;
		animation-name: placeHolderShimmer;
		animation-timing-function: linear;
		background: #f6f7f8;
		background: linear-gradient(to right, #afafaf 8%, #9a9999 38%, #afafaf 54%);
		background-size: auto;
		position: absolute;
		width: 300px;
		height: 420px;
		z-index: -1;
		border-radius: 0.5rem;
	}
</style>

---
description:
globs:
alwaysApply: true
---
# Project Architecture

This document outlines the high-level architecture of the PokéCards-Collector application.

## Overview

PokéCards-Collector is a web application built using the SvelteKit framework for the frontend and Supabase as the backend-as-a-service (BaaS). It leverages TypeScript for type safety and Tailwind CSS for styling.

## Key Components

*   **Frontend Framework:** SvelteKit handles routing, server-side rendering (SSR), and component management.
*   **Backend:** Supabase provides database storage (PostgreSQL), user authentication, and real-time capabilities (though not explicitly seen in initial files, it's a common Supabase feature).
*   **Database:** A PostgreSQL database managed by Supabase stores user data, collection details, wishlists, and potentially cached/scraped Pokémon TCG data. The initial schema is defined in `supabase-schema.sql`.
*   **Styling:** Tailwind CSS is used for utility-first styling, configured in `tailwind.config.mjs` and applied globally via `src/app.css`.
*   **Data Scraping:** A separate CLI tool (`scraper-cli.ts` using `tsx`) is provided to fetch data from the Pokémon TCG API and PokéAPI, process it, and potentially store it locally (`src/assets/`) or in the Supabase database.

## Data Flow

1.  **Client Request:** User interacts with the SvelteKit frontend in their browser.
2.  **SvelteKit Routing:** SvelteKit matches the URL to a route defined in `src/routes/`.
3.  **Data Loading:**
    *   `+page.server.ts` or `+layout.server.ts` files fetch necessary data for the page, potentially interacting with Supabase or local JSON files (`src/assets/`). Helper functions in `src/lib/helpers/` might abstract data fetching logic.
    *   Data can also be fetched client-side within Svelte components (`<script>` blocks) using the Supabase client (`src/lib/supabase.ts`).
4.  **Rendering:** SvelteKit renders the page, combining fetched data with Svelte components (`.svelte` files).
5.  **API Interaction:** Client-side interactions (e.g., adding to collection) directly call Supabase functions or potentially custom API endpoints defined in `src/routes/api/`.
6.  **Authentication:** Supabase handles user sign-up, login, and session management. The Supabase client makes user information available throughout the app.

## Alias Configuration

In addition to the structure described above, the following aliases have been configured in `svelte.config.js` to streamline module imports and improve code readability. These include custom aliases as well as SvelteKit's default aliases:

```js
alias: {
  '@components': 'src/lib/components/*',
  '$helpers': 'src/lib/helpers/*',
  '$stores': 'src/lib/stores/*',
  '$scrapers': 'src/scrapers/*',
  '~': 'src/*',
},
```

- **@components:** Access shared components located in `src/lib/components/`.
- **$helpers:** Import utility functions from `src/lib/helpers/`.
- **$stores:** Easily import Svelte stores from `src/lib/stores/`.
- **$scrapers:** Reference data scraping scripts located in `src/scrapers/`.
- **~:** A global alias to reference any file within `src/`.

Additionally, SvelteKit provides some default aliases:

- **$app**: Provides access to SvelteKit's runtime modules (e.g., navigation, stores, forms, and paths).
- **$lib**: Points to the `src/lib`.
- **$env/dynamic/private**: Exposes private environment variables at runtime.
- **$env/dynamic/public**: Exposes public environment variables at runtime.
- **$env/static/private**: Exposes private environment variables at build time.
- **$env/static/public**: Exposes public environment variables at build time.

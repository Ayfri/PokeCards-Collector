---
description: 
globs: 
alwaysApply: true
---
# Directory Structure

This document describes the purpose of the main directories within the `src` folder.

```
src/
├── assets/         # Static data files (e.g., scraped JSON data used by the app).
├── lib/            # Core application library: reusable components, utilities, stores, etc.
│   ├── components/ # Shared Svelte components used across multiple routes.
│   ├── helpers/    # Utility functions (e.g., data transformations, formatting).
│   ├── services/   # Modules for specific business logic or external API interactions (beyond Supabase).
│   ├── stores/     # Svelte stores for managing application state.
│   └── supabase.ts # Supabase client initialization and export.
├── routes/         # Application pages and API endpoints based on SvelteKit's file-based routing.
│                   # Each subdirectory represents a route segment.
│                   # Files like +page.svelte, +layout.svelte, +page.server.ts define page structure and data loading.
├── scrappers/      # Scripts related to the data scraping CLI tool.
├── styles/         # Global CSS styles or Tailwind base/component layers (if needed beyond app.css).
├── fonts/          # Font files.
├── app.css         # Main global CSS file, primarily for Tailwind directives and base styles.
├── app.d.ts        # Global TypeScript type declarations for SvelteKit.
├── app.html        # Main HTML template file used by SvelteKit.
└── constants.ts    # Application-wide constant values.
```

## Key Locations

*   **New Pages:** Add new pages by creating folders and `+page.svelte` / `+page.server.ts` files within `src/routes/`.
*   **Reusable UI:** Create general-purpose Svelte components in `src/lib/components/`.
*   **Data Fetching Logic:** Place server-side data fetching logic in `+page.server.ts` or `+layout.server.ts` files. Use `src/lib/helpers/` or `src/lib/services/` for abstracting complex fetching/data manipulation.
*   **State Management:** Use Svelte stores defined in `src/lib/stores/` for cross-component state.
*   **Supabase Client:** Import the initialized Supabase client from `src/lib/supabase.ts`. 
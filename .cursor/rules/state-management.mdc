---
description: Documentation on how to deal with data and states in the code.
globs:
alwaysApply: false
---
# State Management

State management in PokÃ©Cards-Collector primarily relies on Svelte's built-in mechanisms and potentially Svelte Stores for more complex, shared state.

## Svelte Stores

For global state or state that needs to be shared across non-hierarchical components, use Svelte Stores. Stores should be defined in `src/lib/stores/`.

- **Writable Stores**: For values that can be changed from anywhere.
- **Readable Stores**: For values that are derived from other stores or external sources but shouldn't be directly mutable by components.
- **Derived Stores**: To compute new values based on existing stores.

## Component State

For local component state, use standard Svelte reactivity (`let` and `$:`) or context API for deeply nested component communication.

## Supabase Data

Data fetched from Supabase (e.g., user profile, collection) is often managed via server-side load functions (`+page.server.ts` or `+layout.server.ts`) and passed as props to pages/components. Client-side mutations usually involve calling Supabase client functions and then potentially re-fetching or updating local Svelte stores to reflect changes.

## Props Drilling

*   Pass data down from parent to child components using props (`export let propName`).
*   For events flowing up, use function props (`export let onEventName = () => {}`). Avoid `createEventDispatcher`.

## Layout Data

*   Data loaded in a `+layout.server.ts` or `+layout.ts` file is available to the layout component and all page components rendered within that layout.
*   This is useful for data needed across multiple pages, like user authentication status or global settings.

## Page Data

*   Data loaded in a `+page.server.ts` or `+page.ts` file is passed directly to the corresponding `+page.svelte` component.

## Supabase Client

*   The Supabase client (`src/lib/supabase.ts`) manages authentication state internally. You can use `supabase.auth.getSession()` and `supabase.auth.onAuthStateChange()` to react to login/logout events and get user information.
